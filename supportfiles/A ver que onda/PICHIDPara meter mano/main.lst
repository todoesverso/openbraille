gplink-0.13.4 alpha
Copyright (c) 1998-2005 gputils project
Listing File Generated: 2-25-2008  20:19:55
 
 
Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : FreeWare ANSI-C Compiler
                                           ; Version 2.6.0 #4309 (Nov 10 2006)
                                           ; This file generated Mon Feb 25 20:19:55 2008
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4550
                                           	__config 0x300000, 0x24
                                           	__config 0x300001, 0xe
                                           	__config 0x300002, 0x20
                                           	__config 0x300003, 0x0
                                           	__config 0x300005, 0x1
                                           	__config 0x300006, 0x80
                                           	__config 0x300008, 0xff
                                           	__config 0x300009, 0xff
                                           	__config 0x30000a, 0xff
                                           	__config 0x30000b, 0xff
                                           	__config 0x30000c, 0xff
                                           	__config 0x30000d, 0xff
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _HIDFeatureBuffer
                                           	global _txBuffer
                                           	global _rxBuffer
                                           	global _high_isr
                                           	global _low_isr
                                           	global _UserInit
                                           	global _ProcessIO
                                           	global _SetupFeatureReport
                                           	global _SetFeatureReport
                                           	global _GetFeatureReport
                                           	global _SetupOutputReport
                                           	global _SetOutputReport
                                           	global _GetInputReport
                                           	global _main
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _SPPDATAbits
                                           	extern _SPPCFGbits
                                           	extern _SPPEPSbits
                                           	extern _SPPCONbits
                                           	extern _UFRMLbits
                                           	extern _UFRMHbits
                                           	extern _UIRbits
                                           	extern _UIEbits
                                           	extern _UEIRbits
                                           	extern _UEIEbits
                                           	extern _USTATbits
                                           	extern _UCONbits
                                           	extern _UADDRbits
                                           	extern _UCFGbits
                                           	extern _UEP0bits
                                           	extern _UEP1bits
                                           	extern _UEP2bits
                                           	extern _UEP3bits
                                           	extern _UEP4bits
                                           	extern _UEP5bits
                                           	extern _UEP6bits
                                           	extern _UEP7bits
                                           	extern _UEP8bits
                                           	extern _UEP9bits
                                           	extern _UEP10bits
                                           	extern _UEP11bits
                                           	extern _UEP12bits
                                           	extern _UEP13bits
                                           	extern _UEP14bits
                                           	extern _UEP15bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTEbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _TRISAbits
                                           	extern _TRISBbits
                                           	extern _TRISCbits
                                           	extern _OSCTUNEbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCONbits
                                           	extern _CCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSPCON2bits
                                           	extern _SSPCON1bits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _HLVDCONbits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _FSR2Hbits
                                           	extern _BSRbits
                                           	extern _FSR1Hbits
                                           	extern _FSR0Hbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _TBLPTRUbits
                                           	extern _PCLATHbits
                                           	extern _PCLATUbits
                                           	extern _STKPTRbits
                                           	extern _TOSUbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _deviceState
                                           	extern _selfPowered
                                           	extern _remoteWakeup
                                           	extern _currentConfiguration
                                           	extern _ep0Bo
                                           	extern _ep0Bi
                                           	extern _ep1Bo
                                           	extern _ep1Bi
                                           	extern _SetupPacket
                                           	extern _HIDRxBuffer
                                           	extern _HIDTxBuffer
                                           	extern _outPtr
                                           	extern _inPtr
                                           	extern _wCount
                                           	extern _hidRxLen
                                           	extern _SPPDATA
                                           	extern _SPPCFG
                                           	extern _SPPEPS
                                           	extern _SPPCON
                                           	extern _UFRML
                                           	extern _UFRMH
                                           	extern _UIR
                                           	extern _UIE
                                           	extern _UEIR
                                           	extern _UEIE
                                           	extern _USTAT
                                           	extern _UCON
                                           	extern _UADDR
                                           	extern _UCFG
                                           	extern _UEP0
                                           	extern _UEP1
                                           	extern _UEP2
                                           	extern _UEP3
                                           	extern _UEP4
                                           	extern _UEP5
                                           	extern _UEP6
                                           	extern _UEP7
                                           	extern _UEP8
                                           	extern _UEP9
                                           	extern _UEP10
                                           	extern _UEP11
                                           	extern _UEP12
                                           	extern _UEP13
                                           	extern _UEP14
                                           	extern _UEP15
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTE
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _TRISA
                                           	extern _TRISB
                                           	extern _TRISC
                                           	extern _OSCTUNE
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _SPBRGH
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _ECCP1DEL
                                           	extern _BAUDCON
                                           	extern _CCP2CON
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSPCON2
                                           	extern _SSPCON1
                                           	extern _SSPSTAT
                                           	extern _SSPADD
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _HLVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _EnableUSBModule
                                           	extern _ProcessUSBTransactions
                                           	extern _HIDTxReport
                                           	extern _HIDRxReport
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           
                                           udata_main_0	udata
                                           _rxBuffer	res	32
                                           
                                           udata_main_1	udata
                                           _txBuffer	res	32
                                           
                                           udata_main_2	udata
                                           _HIDFeatureBuffer	res	32
                                           
                                           ;--------------------------------------------------------
                                           ; interrupt vector 
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_main_ivec_0x1_high_isr	code	0X000008
                                           ivec_0x1_high_isr:
000008   efb5     goto	0xf6a               	GOTO	_high_isr
00000a   f007
                                           
                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_main_ivec_0x2_low_isr	code	0X000018
                                           ivec_0x2_low_isr:
000018   ef9c     goto	0xf38               	GOTO	_low_isr
00001a   f007
                                           
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_main__main	code
                                           _main:
                                           ;	.line	347; main.c	ADCON1 |= 0x0F;
000da8   0e0f     movlw	0xf                	MOVLW	0x0f
000daa   12c1     iorwf	0xc1, 0x1, 0       	IORWF	_ADCON1, F
                                           ;	.line	350; main.c	UCFG = 0x14; // Enable pullup resistors; full speed mode
000dac   0e14     movlw	0x14               	MOVLW	0x14
000dae   6e6f     movwf	0x6f, 0            	MOVWF	_UCFG
                                           ;	.line	352; main.c	ADCON0=0xFF;
000db0   0eff     movlw	0xff               	MOVLW	0xff
000db2   6ec2     movwf	0xc2, 0            	MOVWF	_ADCON0
                                           ;	.line	353; main.c	INTCON=0;
000db4   6af2     clrf	0xf2, 0             	CLRF	_INTCON
                                           ;	.line	354; main.c	INTCON2=0;
000db6   6af1     clrf	0xf1, 0             	CLRF	_INTCON2
000db8   6a96     clrf	0x96, 0             	clrf 0xF96
                                           	
                                           ;	.line	358; main.c	PORTE=0;
000dba   6a84     clrf	0x84, 0             	CLRF	_PORTE
000dbc   0100     movlb	0                  	BANKSEL	_deviceState
                                           ;	.line	361; main.c	deviceState = DETACHED;
000dbe   6bd0     clrf	0xd0, 0x1           	CLRF	_deviceState, B
000dc0   0100     movlb	0                  	BANKSEL	_remoteWakeup
                                           ;	.line	362; main.c	remoteWakeup = 0x00;
000dc2   6bcf     clrf	0xcf, 0x1           	CLRF	_remoteWakeup, B
000dc4   0100     movlb	0                  	BANKSEL	_currentConfiguration
                                           ;	.line	363; main.c	currentConfiguration = 0x00;
000dc6   6bd1     clrf	0xd1, 0x1           	CLRF	_currentConfiguration, B
                                           ;	.line	366; main.c	UserInit();
000dc8   ec77     call	0x10ee, 0           	CALL	_UserInit
000dca   f008
                                           _00200_DS_:
                                           ;	.line	372; main.c	EnableUSBModule();
000dcc   ecfc     call	0xff8, 0            	CALL	_EnableUSBModule
000dce   f007
                                           ;	.line	376; main.c	if(UCFGbits.UTEYE != 1)
000dd0   6a00     clrf	0, 0                	CLRF	r0x00
000dd2   be6f     btfsc	0x6f, 0x7, 0       	BTFSC	_UCFGbits, 7
000dd4   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000dd6   5000     movf	0, 0, 0             	MOVF	r0x00, W
000dd8   0a01     xorlw	0x1                	XORLW	0x01
000dda   e002     bz	0xde0                 	BZ	_00198_DS_
                                           ;	.line	377; main.c	ProcessUSBTransactions();
000ddc   ec55     call	0xcaa, 0            	CALL	_ProcessUSBTransactions
000dde   f006
                                           _00198_DS_:
                                           ;	.line	380; main.c	ProcessIO();
000de0   ec12     call	0x1024, 0           	CALL	_ProcessIO
000de2   f008
000de4   d7f3     bra	0xdcc                	BRA	_00200_DS_
000de6   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__GetInputReport	code
                                           _GetInputReport:
                                           ;	.line	327; main.c	void GetInputReport(byte reportID)
000e9c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000e9e   ffe5
000ea0   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000ea2   ffd9
000ea4   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000ea6   ffe5
000ea8   0e02     movlw	0x2                	MOVLW	0x02
000eaa   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
000eac   f000
                                           ;	.line	332; main.c	if (reportID == 0)
000eae   5000     movf	0, 0, 0             	MOVF	r0x00, W
000eb0   e10b     bnz	0xec8                	BNZ	_00192_DS_
                                           ;	.line	336; main.c	outPtr = (byte *)&HIDTxBuffer;
000eb2   0e05     movlw	0x5                	MOVLW	HIGH(_HIDTxBuffer)
000eb4   0100     movlb	0                  	BANKSEL	(_outPtr + 1)
000eb6   6fc1     movwf	0xc1, 0x1          	MOVWF	(_outPtr + 1), B
000eb8   0e00     movlw	0                  	MOVLW	LOW(_HIDTxBuffer)
                                           ; removed redundant BANKSEL
000eba   6fc0     movwf	0xc0, 0x1          	MOVWF	_outPtr, B
000ebc   0e80     movlw	0x80               	MOVLW	0x80
                                           ; removed redundant BANKSEL
000ebe   6fc2     movwf	0xc2, 0x1          	MOVWF	(_outPtr + 2), B
                                           ;	.line	339; main.c	wCount = HID_INPUT_REPORT_BYTES;
000ec0   0e20     movlw	0x20               	MOVLW	0x20
000ec2   0100     movlb	0                  	BANKSEL	_wCount
000ec4   6fc6     movwf	0xc6, 0x1          	MOVWF	_wCount, B
                                           ; removed redundant BANKSEL
000ec6   6bc7     clrf	0xc7, 0x1           	CLRF	(_wCount + 1), B
                                           _00192_DS_:
000ec8   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000eca   f000
000ecc   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000ece   ffd9
000ed0   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__SetOutputReport	code
                                           _SetOutputReport:
                                           ;	.line	313; main.c	void SetOutputReport(byte reportID)
00106e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001070   ffe5
001072   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001074   ffd9
001076   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001078   ffe5
00107a   0e02     movlw	0x2                	MOVLW	0x02
00107c   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00107e   f000
                                           ;	.line	319; main.c	if (reportID != 0)
001080   5000     movf	0, 0, 0             	MOVF	r0x00, W
001082   e100     bnz	0x1084               	BNZ	_00182_DS_
                                           _00182_DS_:
                                           ;	.line	320; main.c	return;
001084   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001086   f000
001088   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00108a   ffd9
00108c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__SetupOutputReport	code
                                           _SetupOutputReport:
                                           ;	.line	300; main.c	void SetupOutputReport(byte reportID)
000f9c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000f9e   ffe5
000fa0   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000fa2   ffd9
000fa4   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000fa6   ffe5
000fa8   0e02     movlw	0x2                	MOVLW	0x02
000faa   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
000fac   f000
                                           ;	.line	302; main.c	if (reportID == 0)
000fae   5000     movf	0, 0, 0             	MOVF	r0x00, W
000fb0   e107     bnz	0xfc0                	BNZ	_00175_DS_
                                           ;	.line	306; main.c	inPtr = (byte*)&HIDRxBuffer;
000fb2   0e05     movlw	0x5                	MOVLW	HIGH(_HIDRxBuffer)
000fb4   0100     movlb	0                  	BANKSEL	(_inPtr + 1)
000fb6   6fc4     movwf	0xc4, 0x1          	MOVWF	(_inPtr + 1), B
000fb8   0e20     movlw	0x20               	MOVLW	LOW(_HIDRxBuffer)
                                           ; removed redundant BANKSEL
000fba   6fc3     movwf	0xc3, 0x1          	MOVWF	_inPtr, B
000fbc   0e80     movlw	0x80               	MOVLW	0x80
                                           ; removed redundant BANKSEL
000fbe   6fc5     movwf	0xc5, 0x1          	MOVWF	(_inPtr + 2), B
                                           _00175_DS_:
000fc0   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000fc2   f000
000fc4   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000fc6   ffd9
000fc8   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__GetFeatureReport	code
                                           _GetFeatureReport:
                                           ;	.line	277; main.c	void GetFeatureReport(byte reportID)
000de8   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000dea   ffe5
000dec   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000dee   ffd9
000df0   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000df2   ffe5
000df4   0e02     movlw	0x2                	MOVLW	0x02
000df6   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
000df8   f000
                                           ;	.line	284; main.c	if (reportID == 0)
000dfa   5000     movf	0, 0, 0             	MOVF	r0x00, W
000dfc   e10e     bnz	0xe1a                	BNZ	_00168_DS_
                                           ;	.line	287; main.c	outPtr = (byte *)&HIDFeatureBuffer;
000dfe   0e00     movlw	0                  	MOVLW	HIGH(_HIDFeatureBuffer)
000e00   0100     movlb	0                  	BANKSEL	(_outPtr + 1)
000e02   6fc1     movwf	0xc1, 0x1          	MOVWF	(_outPtr + 1), B
000e04   0ea0     movlw	0xa0               	MOVLW	LOW(_HIDFeatureBuffer)
                                           ; removed redundant BANKSEL
000e06   6fc0     movwf	0xc0, 0x1          	MOVWF	_outPtr, B
000e08   0e80     movlw	0x80               	MOVLW	0x80
                                           ; removed redundant BANKSEL
000e0a   6fc2     movwf	0xc2, 0x1          	MOVWF	(_outPtr + 2), B
                                           ;	.line	288; main.c	HIDFeatureBuffer[0] = PORTA;
000e0c   5080     movf	0x80, 0, 0          	MOVF	_PORTA, W
000e0e   0100     movlb	0                  	BANKSEL	_HIDFeatureBuffer
000e10   6fa0     movwf	0xa0, 0x1          	MOVWF	_HIDFeatureBuffer, B
                                           ;	.line	290; main.c	wCount = HID_FEATURE_REPORT_BYTES;
000e12   0e20     movlw	0x20               	MOVLW	0x20
000e14   0100     movlb	0                  	BANKSEL	_wCount
000e16   6fc6     movwf	0xc6, 0x1          	MOVWF	_wCount, B
                                           ; removed redundant BANKSEL
000e18   6bc7     clrf	0xc7, 0x1           	CLRF	(_wCount + 1), B
                                           _00168_DS_:
000e1a   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000e1c   f000
000e1e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000e20   ffd9
000e22   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__SetFeatureReport	code
                                           _SetFeatureReport:
                                           ;	.line	245; main.c	void SetFeatureReport(byte reportID)
000f06   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000f08   ffe5
000f0a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000f0c   ffd9
000f0e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000f10   ffe5
000f12   0e02     movlw	0x2                	MOVLW	0x02
000f14   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
000f16   f000
                                           ;	.line	251; main.c	if (reportID == 0)
000f18   5000     movf	0, 0, 0             	MOVF	r0x00, W
000f1a   e109     bnz	0xf2e                	BNZ	_00161_DS_
                                           ;	.line	255; main.c	PORTEbits.RE0 = (HIDFeatureBuffer[0] & 0x01);
000f1c   0e01     movlw	0x1                	MOVLW	0x01
000f1e   0100     movlb	0                  	BANKSEL	_HIDFeatureBuffer
000f20   15a0     andwf	0xa0, 0, 0x1       	ANDWF	_HIDFeatureBuffer, W, B
                                           ; #	MOVWF	r0x00
                                           ; #	MOVF	r0x00, W
                                           ; ;     peep 2 - Removed redundant move
000f22   0b01     andlw	0x1                	ANDLW	0x01
000f24   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
000f26   5084     movf	0x84, 0, 0          	MOVF	_PORTEbits, W
000f28   0bfe     andlw	0xfe               	ANDLW	0xfe
000f2a   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
000f2c   6e84     movwf	0x84, 0            	MOVWF	_PORTEbits
                                           _00161_DS_:
000f2e   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000f30   f000
000f32   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000f34   ffd9
000f36   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__SetupFeatureReport	code
                                           _SetupFeatureReport:
                                           ;	.line	232; main.c	void SetupFeatureReport(byte reportID)
000fca   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000fcc   ffe5
000fce   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000fd0   ffd9
000fd2   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000fd4   ffe5
000fd6   0e02     movlw	0x2                	MOVLW	0x02
000fd8   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
000fda   f000
                                           ;	.line	234; main.c	if (reportID == 0)
000fdc   5000     movf	0, 0, 0             	MOVF	r0x00, W
000fde   e107     bnz	0xfee                	BNZ	_00154_DS_
                                           ;	.line	238; main.c	inPtr = (byte*)&HIDFeatureBuffer;
000fe0   0e00     movlw	0                  	MOVLW	HIGH(_HIDFeatureBuffer)
000fe2   0100     movlb	0                  	BANKSEL	(_inPtr + 1)
000fe4   6fc4     movwf	0xc4, 0x1          	MOVWF	(_inPtr + 1), B
000fe6   0ea0     movlw	0xa0               	MOVLW	LOW(_HIDFeatureBuffer)
                                           ; removed redundant BANKSEL
000fe8   6fc3     movwf	0xc3, 0x1          	MOVWF	_inPtr, B
000fea   0e80     movlw	0x80               	MOVLW	0x80
                                           ; removed redundant BANKSEL
000fec   6fc5     movwf	0xc5, 0x1          	MOVWF	(_inPtr + 2), B
                                           _00154_DS_:
000fee   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000ff0   f000
000ff2   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000ff4   ffd9
000ff6   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__ProcessIO	code
                                           _ProcessIO:
                                           ;	.line	216; main.c	void ProcessIO(void)
001024   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001026   ffe5
                                           ;	.line	219; main.c	checkEcho();
001028   ec7b     call	0x10f6, 0           	CALL	_checkEcho
00102a   f008
                                           ;	.line	222; main.c	if ((deviceState < CONFIGURED) || (UCONbits.SUSPND==1))
00102c   0e05     movlw	0x5                	MOVLW	0x05
00102e   0100     movlb	0                  	BANKSEL	_deviceState
001030   5dd0     subwf	0xd0, 0, 0x1       	SUBWF	_deviceState, W, B
001032   e306     bnc	0x1040               	BNC	_00139_DS_
001034   6a00     clrf	0, 0                	CLRF	r0x00
001036   b26d     btfsc	0x6d, 0x1, 0       	BTFSC	_UCONbits, 1
001038   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
00103a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00103c   0a01     xorlw	0x1                	XORLW	0x01
00103e   e101     bnz	0x1042               	BNZ	_00140_DS_
                                           _00139_DS_:
                                           ;	.line	223; main.c	return;
001040   d002     bra	0x1046               	BRA	_00142_DS_
                                           _00140_DS_:
                                           ;	.line	226; main.c	USBEcho();
001042   ec56     call	0xaac, 0            	CALL	_USBEcho
001044   f005
                                           _00142_DS_:
001046   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001048   f000
00104a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__USBEcho	code
                                           _USBEcho:
                                           ;	.line	191; main.c	static void USBEcho(void)
000aac   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000aae   ffe5
000ab0   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000ab2   ffe5
000ab4   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000ab6   ffe5
000ab8   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000aba   ffe5
000abc   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000abe   ffe5
                                           ;	.line	196; main.c	rxCnt = HIDRxReport(rxBuffer, HID_OUTPUT_REPORT_BYTES);
000ac0   0e00     movlw	0                  	MOVLW	HIGH(_rxBuffer)
000ac2   6e01     movwf	0x1, 0             	MOVWF	r0x01
000ac4   0e60     movlw	0x60               	MOVLW	LOW(_rxBuffer)
000ac6   6e00     movwf	0, 0               	MOVWF	r0x00
000ac8   0e80     movlw	0x80               	MOVLW	0x80
000aca   6e02     movwf	0x2, 0             	MOVWF	r0x02
000acc   0e20     movlw	0x20               	MOVLW	0x20
000ace   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ad0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000ad2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ad4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000ad6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000ad8   5000     movf	0, 0, 0             	MOVF	r0x00, W
000ada   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000adc   ec99     call	0x732, 0            	CALL	_HIDRxReport
000ade   f003
000ae0   6e00     movwf	0, 0               	MOVWF	r0x00
000ae2   0e04     movlw	0x4                	MOVLW	0x04
000ae4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ; #	MOVF	r0x00, W
                                           ; #	BTFSS	STATUS, 2
                                           ; #	GOTO	_00134_DS_
                                           ; #	GOTO	_00130_DS_
                                           ; #	CLRF	r0x00
                                           ; ;     peep 1 - test/jump to test/skip
                                           ;	.line	199; main.c	if (rxCnt == 0)
000ae6   5000     movf	0, 0, 0             	MOVF	r0x00, W
                                           ;	.line	200; main.c	return;
000ae8   e036     bz	0xb56                 	BZ	_00130_DS_
                                           ;	.line	203; main.c	for (i=0;i<HID_OUTPUT_REPORT_BYTES;i++)
000aea   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00126_DS_:
000aec   0e20     movlw	0x20               	MOVLW	0x20
000aee   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
000af0   e21a     bc	0xb26                 	BC	_00123_DS_
                                           ;	.line	204; main.c	txBuffer[i] = rxBuffer[i];            
000af2   0e80     movlw	0x80               	MOVLW	LOW(_txBuffer)
000af4   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
000af6   6e01     movwf	0x1, 0             	MOVWF	r0x01
000af8   6a02     clrf	0x2, 0              	CLRF	r0x02
000afa   0e00     movlw	0                  	MOVLW	HIGH(_txBuffer)
000afc   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000afe   0e60     movlw	0x60               	MOVLW	LOW(_rxBuffer)
000b00   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
000b02   6e03     movwf	0x3, 0             	MOVWF	r0x03
000b04   6a04     clrf	0x4, 0              	CLRF	r0x04
000b06   0e00     movlw	0                  	MOVLW	HIGH(_rxBuffer)
000b08   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
000b0a   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
000b0c   ffe9
000b0e   c004     movff	0x4, 0xfea         	MOVFF	r0x04, FSR0H
000b10   ffea
000b12   cfef     movff	0xfef, 0x3         	MOVFF	INDF0, r0x03
000b14   f003
000b16   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
000b18   ffe9
000b1a   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
000b1c   ffea
000b1e   c003     movff	0x3, 0xfef         	MOVFF	r0x03, INDF0
000b20   ffef
                                           ;	.line	203; main.c	for (i=0;i<HID_OUTPUT_REPORT_BYTES;i++)
000b22   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000b24   d7e3     bra	0xaec                	BRA	_00126_DS_
                                           _00123_DS_:
000b26   0104     movlb	0x4                	BANKSEL	_ep1Bi
                                           ;	.line	207; main.c	while (ep1Bi.Stat & UOWN)
000b28   af0c     btfss	0xc, 0x7, 0x1      	BTFSS	_ep1Bi, 7, B
000b2a   d003     bra	0xb32                	BRA	_00125_DS_
                                           ;	.line	208; main.c	ProcessUSBTransactions(); 
000b2c   ec55     call	0xcaa, 0            	CALL	_ProcessUSBTransactions
000b2e   f006
000b30   d7fa     bra	0xb26                	BRA	_00123_DS_
                                           _00125_DS_:
                                           ;	.line	211; main.c	HIDTxReport(txBuffer, HID_INPUT_REPORT_BYTES);
000b32   0e00     movlw	0                  	MOVLW	HIGH(_txBuffer)
000b34   6e01     movwf	0x1, 0             	MOVWF	r0x01
000b36   0e80     movlw	0x80               	MOVLW	LOW(_txBuffer)
000b38   6e00     movwf	0, 0               	MOVWF	r0x00
000b3a   0e80     movlw	0x80               	MOVLW	0x80
000b3c   6e02     movwf	0x2, 0             	MOVWF	r0x02
000b3e   0e20     movlw	0x20               	MOVLW	0x20
000b40   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b42   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000b44   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b46   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000b48   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b4a   5000     movf	0, 0, 0             	MOVF	r0x00, W
000b4c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000b4e   ec83     call	0x906, 0            	CALL	_HIDTxReport
000b50   f004
000b52   0e04     movlw	0x4                	MOVLW	0x04
000b54   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00130_DS_:
000b56   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
000b58   f004
000b5a   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000b5c   f003
000b5e   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000b60   f002
000b62   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000b64   f001
000b66   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000b68   f000
000b6a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__UserInit	code
                                           _UserInit:
                                           ;	.line	187; main.c	TRISA &= 0xEF;
0010ee   9892     bcf	0x92, 0x4, 0         	BCF	_TRISA, 4
0010f0   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__checkEcho	code
                                           _checkEcho:
                                           ;	.line	177; main.c	}
0010f6   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_main__low_isr	code
                                           _low_isr:
                                           ;	.line	66; main.c	void low_isr(void) shadowregs interrupt 2
000f38   cff3     movff	0xff3, 0xfe5       	MOVFF	PRODL, POSTDEC1
000f3a   ffe5
000f3c   cff4     movff	0xff4, 0xfe5       	MOVFF	PRODH, POSTDEC1
000f3e   ffe5
000f40   cfe9     movff	0xfe9, 0xfe5       	MOVFF	FSR0L, POSTDEC1
000f42   ffe5
000f44   cfea     movff	0xfea, 0xfe5       	MOVFF	FSR0H, POSTDEC1
000f46   ffe5
000f48   cffa     movff	0xffa, 0xfe5       	MOVFF	PCLATH, POSTDEC1
000f4a   ffe5
000f4c   cffb     movff	0xffb, 0xfe5       	MOVFF	PCLATU, POSTDEC1
000f4e   ffe5
                                           ;	.line	69; main.c	}
000f50   cfe4     movff	0xfe4, 0xffb       	MOVFF	PREINC1, PCLATU
000f52   fffb
000f54   cfe4     movff	0xfe4, 0xffa       	MOVFF	PREINC1, PCLATH
000f56   fffa
000f58   cfe4     movff	0xfe4, 0xfea       	MOVFF	PREINC1, FSR0H
000f5a   ffea
000f5c   cfe4     movff	0xfe4, 0xfe9       	MOVFF	PREINC1, FSR0L
000f5e   ffe9
000f60   cfe4     movff	0xfe4, 0xff4       	MOVFF	PREINC1, PRODH
000f62   fff4
000f64   cfe4     movff	0xfe4, 0xff3       	MOVFF	PREINC1, PRODL
000f66   fff3
000f68   0011     retfie	0x1               	RETFIE	0x01
                                           
                                           ; ; Starting pCode block
                                           S_main__high_isr	code
                                           _high_isr:
                                           ;	.line	61; main.c	void high_isr(void) shadowregs interrupt 1
000f6a   cff3     movff	0xff3, 0xfe5       	MOVFF	PRODL, POSTDEC1
000f6c   ffe5
000f6e   cff4     movff	0xff4, 0xfe5       	MOVFF	PRODH, POSTDEC1
000f70   ffe5
000f72   cfe9     movff	0xfe9, 0xfe5       	MOVFF	FSR0L, POSTDEC1
000f74   ffe5
000f76   cfea     movff	0xfea, 0xfe5       	MOVFF	FSR0H, POSTDEC1
000f78   ffe5
000f7a   cffa     movff	0xffa, 0xfe5       	MOVFF	PCLATH, POSTDEC1
000f7c   ffe5
000f7e   cffb     movff	0xffb, 0xfe5       	MOVFF	PCLATU, POSTDEC1
000f80   ffe5
                                           ;	.line	64; main.c	}
000f82   cfe4     movff	0xfe4, 0xffb       	MOVFF	PREINC1, PCLATU
000f84   fffb
000f86   cfe4     movff	0xfe4, 0xffa       	MOVFF	PREINC1, PCLATH
000f88   fffa
000f8a   cfe4     movff	0xfe4, 0xfea       	MOVFF	PREINC1, FSR0H
000f8c   ffea
000f8e   cfe4     movff	0xfe4, 0xfe9       	MOVFF	PREINC1, FSR0L
000f90   ffe9
000f92   cfe4     movff	0xfe4, 0xff4       	MOVFF	PREINC1, PRODH
000f94   fff4
000f96   cfe4     movff	0xfe4, 0xff3       	MOVFF	PREINC1, PRODL
000f98   fff3
000f9a   0011     retfie	0x1               	RETFIE	0x01
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  696 (0x02b8) bytes ( 0.53%)
                                           ;           	  348 (0x015c) words
                                           ; udata size:	   96 (0x0060) bytes ( 5.36%)
                                           ; access size:	    5 (0x0005) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : FreeWare ANSI-C Compiler
                                           ; Version 2.6.0 #4309 (Nov 10 2006)
                                           ; This file generated Mon Feb 25 20:19:46 2008
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4550
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _deviceAddress
                                           	global _HIDTxReport
                                           	global _HIDRxReport
                                           	global _EnableUSBModule
                                           	global _ProcessUSBTransactions
                                           	global _deviceState
                                           	global _remoteWakeup
                                           	global _selfPowered
                                           	global _currentConfiguration
                                           	global _ctrlTransferStage
                                           	global _HIDPostProcess
                                           	global _requestHandled
                                           	global _outPtr
                                           	global _inPtr
                                           	global _wCount
                                           	global _hidIdleRate
                                           	global _hidProtocol
                                           	global _hidRxLen
                                           	global _ep0Bo
                                           	global _ep0Bi
                                           	global _ep1Bo
                                           	global _ep1Bi
                                           	global _SetupPacket
                                           	global _controlTransferBuffer
                                           	global _HIDRxBuffer
                                           	global _HIDTxBuffer
                                           	global _HIDInitEndpoint
                                           	global _HIDGetReport
                                           	global _HIDSetReport
                                           	global _ProcessHIDRequest
                                           	global _ProcessStandardRequest
                                           	global _InDataStage
                                           	global _OutDataStage
                                           	global _SetupStage
                                           	global _WaitForSetupStage
                                           	global _ProcessControlTransfer
                                           	global _UnSuspend
                                           	global _StartOfFrame
                                           	global _Stall
                                           	global _Suspend
                                           	global _BusReset
                                           	global _deviceDescriptor
                                           	global _configDescriptor
                                           	global _HIDReport
                                           	global _stringDescriptor0
                                           	global _stringDescriptor1
                                           	global _stringDescriptor2
                                           	global _dataEEPROM
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrget1
                                           	extern __gptrput1
                                           	extern _SPPDATAbits
                                           	extern _SPPCFGbits
                                           	extern _SPPEPSbits
                                           	extern _SPPCONbits
                                           	extern _UFRMLbits
                                           	extern _UFRMHbits
                                           	extern _UIRbits
                                           	extern _UIEbits
                                           	extern _UEIRbits
                                           	extern _UEIEbits
                                           	extern _USTATbits
                                           	extern _UCONbits
                                           	extern _UADDRbits
                                           	extern _UCFGbits
                                           	extern _UEP0bits
                                           	extern _UEP1bits
                                           	extern _UEP2bits
                                           	extern _UEP3bits
                                           	extern _UEP4bits
                                           	extern _UEP5bits
                                           	extern _UEP6bits
                                           	extern _UEP7bits
                                           	extern _UEP8bits
                                           	extern _UEP9bits
                                           	extern _UEP10bits
                                           	extern _UEP11bits
                                           	extern _UEP12bits
                                           	extern _UEP13bits
                                           	extern _UEP14bits
                                           	extern _UEP15bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTEbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _TRISAbits
                                           	extern _TRISBbits
                                           	extern _TRISCbits
                                           	extern _OSCTUNEbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCONbits
                                           	extern _CCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSPCON2bits
                                           	extern _SSPCON1bits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _HLVDCONbits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _FSR2Hbits
                                           	extern _BSRbits
                                           	extern _FSR1Hbits
                                           	extern _FSR0Hbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _TBLPTRUbits
                                           	extern _PCLATHbits
                                           	extern _PCLATUbits
                                           	extern _STKPTRbits
                                           	extern _TOSUbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _SPPDATA
                                           	extern _SPPCFG
                                           	extern _SPPEPS
                                           	extern _SPPCON
                                           	extern _UFRML
                                           	extern _UFRMH
                                           	extern _UIR
                                           	extern _UIE
                                           	extern _UEIR
                                           	extern _UEIE
                                           	extern _USTAT
                                           	extern _UCON
                                           	extern _UADDR
                                           	extern _UCFG
                                           	extern _UEP0
                                           	extern _UEP1
                                           	extern _UEP2
                                           	extern _UEP3
                                           	extern _UEP4
                                           	extern _UEP5
                                           	extern _UEP6
                                           	extern _UEP7
                                           	extern _UEP8
                                           	extern _UEP9
                                           	extern _UEP10
                                           	extern _UEP11
                                           	extern _UEP12
                                           	extern _UEP13
                                           	extern _UEP14
                                           	extern _UEP15
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTE
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _TRISA
                                           	extern _TRISB
                                           	extern _TRISC
                                           	extern _OSCTUNE
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _SPBRGH
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _ECCP1DEL
                                           	extern _BAUDCON
                                           	extern _CCP2CON
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSPCON2
                                           	extern _SSPCON1
                                           	extern _SSPSTAT
                                           	extern _SSPADD
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _HLVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _GetInputReport
                                           	extern _SetupOutputReport
                                           	extern _SetOutputReport
                                           	extern _GetFeatureReport
                                           	extern _SetupFeatureReport
                                           	extern _SetFeatureReport
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           TBLPTRL	equ	0xff6
                                           TBLPTRH	equ	0xff7
                                           TBLPTRU	equ	0xff8
                                           TABLAT	equ	0xff5
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           
                                           
                                           usbram5	udata
                                           _HIDTxBuffer	res	32
                                           _HIDRxBuffer	res	32
                                           _SetupPacket	res	64
                                           _controlTransferBuffer	res	32
                                           
                                           udata_usb_0	udata
                                           _deviceAddress	res	1
                                           
                                           udata_usb_1	udata
                                           _hidRxLen	res	1
                                           
                                           udata_usb_2	udata
                                           _requestHandled	res	1
                                           
                                           udata_usb_3	udata
                                           _outPtr	res	3
                                           
                                           udata_usb_4	udata
                                           _wCount	res	2
                                           
                                           udata_usb_5	udata
                                           _HIDPostProcess	res	1
                                           
                                           udata_usb_6	udata
                                           _hidIdleRate	res	1
                                           
                                           udata_usb_7	udata
                                           _hidProtocol	res	1
                                           
                                           udata_usb_8	udata
                                           _inPtr	res	3
                                           
                                           udata_usb_9	udata
                                           _selfPowered	res	1
                                           
                                           udata_usb_10	udata
                                           _remoteWakeup	res	1
                                           
                                           udata_usb_11	udata
                                           _deviceState	res	1
                                           
                                           udata_usb_12	udata
                                           _currentConfiguration	res	1
                                           
                                           udata_usb_13	udata
                                           _ctrlTransferStage	res	1
                                           
                                           
                                           ustat_usb_00	udata	0X0400
                                           _ep0Bo	res	4
                                           _ep0Bi	res	4
                                           _ep1Bo	res	4
                                           _ep1Bi	res	4
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; ; Starting pCode block for absolute Ival
                                           S_usb__dataEEPROM	code	0XF00000
                                           _dataEEPROM:
f00000   0000     nop                      	DB	0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x03, 0x00, 0x04, 0x00, 0x05, 0x00
f00002   0001     dw	0x1  ;unknown opcode  
f00004   0002     dw	0x2  ;unknown opcode  
f00006   0003     sleep                    
f00008   0004     clrwdt                   
f0000a   0005     push                     
f0000c   0006     pop                      	DB	0x06, 0x00, 0x07, 0x00, 0x30, 0x00, 0x31, 0x00, 0x32, 0x00, 0x33, 0x00
f0000e   0007     daw                      
f00010   0030     dw	0x30  ;unknown opcode 
f00012   0031     dw	0x31  ;unknown opcode 
f00014   0032     dw	0x32  ;unknown opcode 
f00016   0033     dw	0x33  ;unknown opcode 
f00018   0034     dw	0x34  ;unknown opcode 	DB	0x34, 0x00, 0x35, 0x00, 0x36, 0x00, 0x37, 0x00, 0x38, 0x00, 0x39, 0x00
f0001a   0035     dw	0x35  ;unknown opcode 
f0001c   0036     dw	0x36  ;unknown opcode 
f0001e   0037     dw	0x37  ;unknown opcode 
f00020   0038     dw	0x38  ;unknown opcode 
f00022   0039     dw	0x39  ;unknown opcode 
f00024   0061     dw	0x61  ;unknown opcode 	DB	0x61, 0x00, 0x62, 0x00, 0x63, 0x00, 0x64, 0x00, 0x65, 0x00, 0x66, 0x00
f00026   0062     dw	0x62  ;unknown opcode 
f00028   0063     dw	0x63  ;unknown opcode 
f0002a   0064     dw	0x64  ;unknown opcode 
f0002c   0065     dw	0x65  ;unknown opcode 
f0002e   0066     dw	0x66  ;unknown opcode 
                                           
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_usb__ProcessUSBTransactions	code
                                           _ProcessUSBTransactions:
                                           ;	.line	1106; usb.c	void ProcessUSBTransactions(void)
000caa   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000cac   ffe5
                                           ; #	MOVF	_deviceState, W, B
                                           ; #	BTFSS	STATUS, 2
                                           ; #	GOTO	_00629_DS_
                                           ; #	GOTO	_00655_DS_
                                           ; #	BTFSS	_UIRbits, 2
                                           ; ;     peep 1 - test/jump to test/skip
000cae   0100     movlb	0                  	BANKSEL	_deviceState
                                           ;	.line	1109; usb.c	if(deviceState == DETACHED)
000cb0   51d0     movf	0xd0, 0, 0x1        	MOVF	_deviceState, W, B
                                           ;	.line	1110; usb.c	return;
000cb2   e02e     bz	0xd10                 	BZ	_00655_DS_
                                           ;	.line	1113; usb.c	if(UIRbits.ACTIVIF && UIEbits.ACTIVIE)
000cb4   a468     btfss	0x68, 0x2, 0       	BTFSS	_UIRbits, 2
                                           ; #	GOTO	_00631_DS_
                                           ; #	BTFSS	_UIEbits, 2
                                           ; #	GOTO	_00631_DS_
                                           ; #	CALL	_UnSuspend
                                           ; #	CLRF	r0x00
                                           ; ;     peep 1 - test/jump to test/skip
                                           ;	.line	1114; usb.c	UnSuspend();
000cb6   d003     bra	0xcbe                	BRA	_00631_DS_
                                           ;	.line	1118; usb.c	if(UCONbits.SUSPND == 1)
000cb8   b469     btfsc	0x69, 0x2, 0       	BTFSC	_UIEbits, 2
000cba   ec73     call	0x10e6, 0           	CALL	_UnSuspend
000cbc   f008
                                           _00631_DS_:
000cbe   6a00     clrf	0, 0                	CLRF	r0x00
000cc0   b26d     btfsc	0x6d, 0x1, 0       	BTFSC	_UCONbits, 1
000cc2   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000cc4   5000     movf	0, 0, 0             	MOVF	r0x00, W
000cc6   0a01     xorlw	0x1                	XORLW	0x01
                                           ;	.line	1119; usb.c	return;
000cc8   e023     bz	0xd10                 	BZ	_00655_DS_
                                           ;	.line	1122; usb.c	if (UIRbits.URSTIF && UIEbits.URSTIE)
000cca   a068     btfss	0x68, 0, 0         	BTFSS	_UIRbits, 0
                                           ; #	GOTO	_00636_DS_
                                           ; #	BTFSS	_UIEbits, 0
                                           ; #	GOTO	_00636_DS_
                                           ; #	CALL	_BusReset
                                           ; #	BTFSS	_UIRbits, 4
                                           ; ;     peep 1 - test/jump to test/skip
                                           ;	.line	1124; usb.c	BusReset();
000ccc   d003     bra	0xcd4                	BRA	_00636_DS_
                                           ;	.line	1127; usb.c	if (UIRbits.IDLEIF && UIEbits.IDLEIE)
000cce   b069     btfsc	0x69, 0, 0         	BTFSC	_UIEbits, 0
000cd0   ecb2     call	0xd64, 0            	CALL	_BusReset
000cd2   f006
                                           _00636_DS_:
000cd4   a868     btfss	0x68, 0x4, 0       	BTFSS	_UIRbits, 4
                                           ; #	GOTO	_00639_DS_
                                           ; #	BTFSS	_UIEbits, 4
                                           ; #	GOTO	_00639_DS_
                                           ; #	CALL	_Suspend
                                           ; #	BTFSS	_UIRbits, 6
                                           ; ;     peep 1 - test/jump to test/skip
                                           ;	.line	1130; usb.c	Suspend();
000cd6   d003     bra	0xcde                	BRA	_00639_DS_
                                           ;	.line	1132; usb.c	if (UIRbits.SOFIF && UIEbits.SOFIE)
000cd8   b869     btfsc	0x69, 0x4, 0       	BTFSC	_UIEbits, 4
000cda   ec7c     call	0x10f8, 0           	CALL	_Suspend
000cdc   f008
                                           _00639_DS_:
000cde   ac68     btfss	0x68, 0x6, 0       	BTFSS	_UIRbits, 6
                                           ; #	GOTO	_00642_DS_
                                           ; #	BTFSS	_UIEbits, 6
                                           ; #	GOTO	_00642_DS_
                                           ; #	CALL	_StartOfFrame
                                           ; #	BTFSS	_UIRbits, 5
                                           ; ;     peep 1 - test/jump to test/skip
                                           ;	.line	1134; usb.c	StartOfFrame();
000ce0   d003     bra	0xce8                	BRA	_00642_DS_
                                           ;	.line	1136; usb.c	if (UIRbits.STALLIF && UIEbits.STALLIE)
000ce2   bc69     btfsc	0x69, 0x6, 0       	BTFSC	_UIEbits, 6
000ce4   ec79     call	0x10f2, 0           	CALL	_StartOfFrame
000ce6   f008
                                           _00642_DS_:
000ce8   aa68     btfss	0x68, 0x5, 0       	BTFSS	_UIRbits, 5
                                           ; #	GOTO	_00645_DS_
                                           ; #	BTFSS	_UIEbits, 5
                                           ; #	GOTO	_00645_DS_
                                           ; #	CALL	_Stall
                                           ; #	BTFSS	_UIRbits, 1
                                           ; ;     peep 1 - test/jump to test/skip
                                           ;	.line	1138; usb.c	Stall();
000cea   d003     bra	0xcf2                	BRA	_00645_DS_
                                           ;	.line	1141; usb.c	if (UIRbits.UERRIF && UIEbits.UERRIE)
000cec   ba69     btfsc	0x69, 0x5, 0       	BTFSC	_UIEbits, 5
000cee   ec47     call	0x108e, 0           	CALL	_Stall
000cf0   f008
                                           _00645_DS_:
000cf2   a268     btfss	0x68, 0x1, 0       	BTFSS	_UIRbits, 1
                                           ; #	GOTO	_00648_DS_
                                           ; #	BTFSS	_UIEbits, 1
                                           ; #	GOTO	_00648_DS_
                                           ; #	BCF	_UIRbits, 1
                                           ; #	MOVLW	0x03
                                           ; ;     peep 1 - test/jump to test/skip
                                           ;	.line	1146; usb.c	UIRbits.UERRIF = 0;
000cf4   d002     bra	0xcfa                	BRA	_00648_DS_
                                           ;	.line	1150; usb.c	if (deviceState < DEFAULT)
000cf6   b269     btfsc	0x69, 0x1, 0       	BTFSC	_UIEbits, 1
000cf8   9268     bcf	0x68, 0x1, 0         	BCF	_UIRbits, 1
                                           _00648_DS_:
000cfa   0e03     movlw	0x3                	MOVLW	0x03
                                           ; #	SUBWF	_deviceState, W, B
                                           ; #	BTFSC	STATUS, 0
                                           ; #	GOTO	_00651_DS_
                                           ; #	GOTO	_00655_DS_
                                           ; #	BTFSS	_UIRbits, 3
                                           ; ;     peep 1 - test/jump to test/skip
000cfc   0100     movlb	0                  	BANKSEL	_deviceState
                                           ;	.line	1151; usb.c	return;
000cfe   5dd0     subwf	0xd0, 0, 0x1       	SUBWF	_deviceState, W, B
                                           ;	.line	1154; usb.c	if(UIRbits.TRNIF && UIEbits.TRNIE)
000d00   e307     bnc	0xd10                	BNC	_00655_DS_
000d02   a668     btfss	0x68, 0x3, 0       	BTFSS	_UIRbits, 3
000d04   d005     bra	0xd10                	BRA	_00655_DS_
000d06   a669     btfss	0x69, 0x3, 0       	BTFSS	_UIEbits, 3
000d08   d003     bra	0xd10                	BRA	_00655_DS_
                                           ;	.line	1156; usb.c	ProcessControlTransfer();
000d0a   ecf2     call	0x9e4, 0            	CALL	_ProcessControlTransfer
000d0c   f004
                                           ;	.line	1159; usb.c	UIRbits.TRNIF = 0;
000d0e   9668     bcf	0x68, 0x3, 0         	BCF	_UIRbits, 3
                                           _00655_DS_:
000d10   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000d12   f000
000d14   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_usb__BusReset	code
                                           _BusReset:
                                           ;	.line	1078; usb.c	void BusReset()
000d64   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000d66   ffe5
                                           ;	.line	1080; usb.c	UEIR  = 0x00;
000d68   6a6a     clrf	0x6a, 0             	CLRF	_UEIR
                                           ;	.line	1081; usb.c	UIR   = 0x00;
000d6a   6a68     clrf	0x68, 0             	CLRF	_UIR
                                           ;	.line	1082; usb.c	UEIE  = 0x9f;
000d6c   0e9f     movlw	0x9f               	MOVLW	0x9f
000d6e   6e6b     movwf	0x6b, 0            	MOVWF	_UEIE
                                           ;	.line	1083; usb.c	UIE   = 0x7b;
000d70   0e7b     movlw	0x7b               	MOVLW	0x7b
000d72   6e69     movwf	0x69, 0            	MOVWF	_UIE
                                           ;	.line	1084; usb.c	UADDR = 0x00;
000d74   6a6e     clrf	0x6e, 0             	CLRF	_UADDR
                                           ;	.line	1087; usb.c	UEP0 = 0x16;
000d76   0e16     movlw	0x16               	MOVLW	0x16
000d78   6e70     movwf	0x70, 0            	MOVWF	_UEP0
                                           _00615_DS_:
                                           ;	.line	1090; usb.c	while (UIRbits.TRNIF == 1)
000d7a   6a00     clrf	0, 0                	CLRF	r0x00
000d7c   b668     btfsc	0x68, 0x3, 0       	BTFSC	_UIRbits, 3
000d7e   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000d80   5000     movf	0, 0, 0             	MOVF	r0x00, W
000d82   0a01     xorlw	0x1                	XORLW	0x01
000d84   e102     bnz	0xd8a                	BNZ	_00617_DS_
                                           ;	.line	1091; usb.c	UIRbits.TRNIF = 0;
000d86   9668     bcf	0x68, 0x3, 0         	BCF	_UIRbits, 3
000d88   d7f8     bra	0xd7a                	BRA	_00615_DS_
                                           _00617_DS_:
                                           ;	.line	1094; usb.c	UCONbits.PKTDIS = 0;
000d8a   986d     bcf	0x6d, 0x4, 0         	BCF	_UCONbits, 4
                                           ;	.line	1097; usb.c	WaitForSetupStage();
000d8c   ec69     call	0xed2, 0            	CALL	_WaitForSetupStage
000d8e   f007
000d90   0100     movlb	0                  	BANKSEL	_remoteWakeup
                                           ;	.line	1099; usb.c	remoteWakeup = 0;         // Remote wakeup is off by default
000d92   6bcf     clrf	0xcf, 0x1           	CLRF	_remoteWakeup, B
000d94   0100     movlb	0                  	BANKSEL	_selfPowered
                                           ;	.line	1100; usb.c	selfPowered = 0;          // Self powered is off by default
000d96   6bce     clrf	0xce, 0x1           	CLRF	_selfPowered, B
000d98   0100     movlb	0                  	BANKSEL	_currentConfiguration
                                           ;	.line	1101; usb.c	currentConfiguration = 0; // Clear active configuration
000d9a   6bd1     clrf	0xd1, 0x1           	CLRF	_currentConfiguration, B
                                           ;	.line	1102; usb.c	deviceState = DEFAULT;
000d9c   0e03     movlw	0x3                	MOVLW	0x03
000d9e   0100     movlb	0                  	BANKSEL	_deviceState
000da0   6fd0     movwf	0xd0, 0x1          	MOVWF	_deviceState, B
000da2   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000da4   f000
000da6   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_usb__Suspend	code
                                           _Suspend:
                                           ;	.line	1076; usb.c	}
0010f8   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_usb__Stall	code
                                           _Stall:
                                           ;	.line	1033; usb.c	void Stall(void)
00108e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001090   ffe5
                                           ;	.line	1038; usb.c	if(UEP0bits.EPSTALL == 1)
001092   6a00     clrf	0, 0                	CLRF	r0x00
001094   b070     btfsc	0x70, 0, 0         	BTFSC	_UEP0bits, 0
001096   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
001098   5000     movf	0, 0, 0             	MOVF	r0x00, W
00109a   0a01     xorlw	0x1                	XORLW	0x01
00109c   e103     bnz	0x10a4               	BNZ	_00601_DS_
                                           ;	.line	1041; usb.c	WaitForSetupStage();
00109e   ec69     call	0xed2, 0            	CALL	_WaitForSetupStage
0010a0   f007
                                           ;	.line	1042; usb.c	UEP0bits.EPSTALL = 0;
0010a2   9070     bcf	0x70, 0, 0           	BCF	_UEP0bits, 0
                                           _00601_DS_:
                                           ;	.line	1044; usb.c	UIRbits.STALLIF = 0;
0010a4   9a68     bcf	0x68, 0x5, 0         	BCF	_UIRbits, 5
0010a6   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0010a8   f000
0010aa   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_usb__StartOfFrame	code
                                           _StartOfFrame:
                                           ;	.line	1029; usb.c	UIRbits.SOFIF = 0;
0010f2   9c68     bcf	0x68, 0x6, 0         	BCF	_UIRbits, 6
0010f4   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_usb__UnSuspend	code
                                           _UnSuspend:
                                           ;	.line	1019; usb.c	UCONbits.SUSPND = 0;
0010e6   926d     bcf	0x6d, 0x1, 0         	BCF	_UCONbits, 1
                                           ;	.line	1020; usb.c	UIEbits.ACTIVIE = 0;
0010e8   9469     bcf	0x69, 0x2, 0         	BCF	_UIEbits, 2
                                           ;	.line	1021; usb.c	UIRbits.ACTIVIF = 0;
0010ea   9468     bcf	0x68, 0x2, 0         	BCF	_UIRbits, 2
0010ec   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_usb__EnableUSBModule	code
                                           _EnableUSBModule:
                                           ;	.line	986; usb.c	if(UCONbits.USBEN == 0)
000ff8   b66d     btfsc	0x6d, 0x3, 0       	BTFSC	_UCONbits, 3
000ffa   d006     bra	0x1008               	BRA	_00577_DS_
                                           ;	.line	991; usb.c	UCON = 0;
000ffc   6a6d     clrf	0x6d, 0             	CLRF	_UCON
                                           ;	.line	992; usb.c	UIE = 0;
000ffe   6a69     clrf	0x69, 0             	CLRF	_UIE
                                           ;	.line	993; usb.c	UCONbits.USBEN = 1;
001000   866d     bsf	0x6d, 0x3, 0         	BSF	_UCONbits, 3
                                           ;	.line	994; usb.c	deviceState = ATTACHED;
001002   0e01     movlw	0x1                	MOVLW	0x01
001004   0100     movlb	0                  	BANKSEL	_deviceState
001006   6fd0     movwf	0xd0, 0x1          	MOVWF	_deviceState, B
                                           _00577_DS_:
001008   0100     movlb	0                  	BANKSEL	_deviceState
                                           ;	.line	999; usb.c	if ((deviceState == ATTACHED) && !UCONbits.SE0)
00100a   51d0     movf	0xd0, 0, 0x1        	MOVF	_deviceState, W, B
00100c   0a01     xorlw	0x1                	XORLW	0x01
00100e   e109     bnz	0x1022               	BNZ	_00581_DS_
001010   ba6d     btfsc	0x6d, 0x5, 0       	BTFSC	_UCONbits, 5
001012   d007     bra	0x1022               	BRA	_00581_DS_
                                           ;	.line	1001; usb.c	UIR = 0;
001014   6a68     clrf	0x68, 0             	CLRF	_UIR
                                           ;	.line	1002; usb.c	UIE = 0;
001016   6a69     clrf	0x69, 0             	CLRF	_UIE
                                           ;	.line	1003; usb.c	UIEbits.URSTIE = 1;
001018   8069     bsf	0x69, 0, 0           	BSF	_UIEbits, 0
                                           ;	.line	1004; usb.c	UIEbits.IDLEIE = 1;
00101a   8869     bsf	0x69, 0x4, 0         	BSF	_UIEbits, 4
                                           ;	.line	1005; usb.c	deviceState = POWERED;
00101c   0e02     movlw	0x2                	MOVLW	0x02
00101e   0100     movlb	0                  	BANKSEL	_deviceState
001020   6fd0     movwf	0xd0, 0x1          	MOVWF	_deviceState, B
                                           _00581_DS_:
001022   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_usb__ProcessControlTransfer	code
                                           _ProcessControlTransfer:
                                           ;	.line	884; usb.c	void ProcessControlTransfer(void)
0009e4   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0009e6   ffe5
                                           ;	.line	889; usb.c	if (USTAT == 0)
0009e8   506c     movf	0x6c, 0, 0          	MOVF	_USTAT, W
0009ea   a4d8     btfss	0xd8, 0x2, 0       	BTFSS	STATUS, 2
0009ec   d03a     bra	0xa62                	BRA	_00540_DS_
                                           ;	.line	892; usb.c	byte PID = (ep0Bo.Stat & 0x3C) >> 2; // Pull PID from middle of BD0STAT
0009ee   0e3c     movlw	0x3c               	MOVLW	0x3c
0009f0   0104     movlb	0x4                	BANKSEL	_ep0Bo
0009f2   1500     andwf	0, 0, 0x1          	ANDWF	_ep0Bo, W, B
0009f4   6e00     movwf	0, 0               	MOVWF	r0x00
0009f6   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
0009f8   3000     rrcf	0, 0, 0             	RRCF	r0x00, W
0009fa   6e00     movwf	0, 0               	MOVWF	r0x00
0009fc   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
0009fe   3200     rrcf	0, 0x1, 0           	RRCF	r0x00, F
                                           ;	.line	893; usb.c	if (PID == 0x0D)
000a00   5000     movf	0, 0, 0             	MOVF	r0x00, W
000a02   0a0d     xorlw	0xd                	XORLW	0x0d
000a04   e103     bnz	0xa0c                	BNZ	_00524_DS_
                                           ;	.line	895; usb.c	SetupStage();
000a06   ec33     call	0x466, 0            	CALL	_SetupStage
000a08   f002
000a0a   d04d     bra	0xaa6                	BRA	_00542_DS_
                                           _00524_DS_:
000a0c   0100     movlb	0                  	BANKSEL	_ctrlTransferStage
                                           ;	.line	896; usb.c	else if (ctrlTransferStage == DATA_OUT_STAGE)
000a0e   51d2     movf	0xd2, 0, 0x1        	MOVF	_ctrlTransferStage, W, B
000a10   0a01     xorlw	0x1                	XORLW	0x01
000a12   e124     bnz	0xa5c                	BNZ	_00521_DS_
                                           ;	.line	900; usb.c	OutDataStage();
000a14   ecab     call	0x556, 0            	CALL	_OutDataStage
000a16   f002
000a18   0100     movlb	0                  	BANKSEL	_HIDPostProcess
                                           ;	.line	904; usb.c	if (HIDPostProcess)
000a1a   51cb     movf	0xcb, 0, 0x1        	MOVF	_HIDPostProcess, W, B
000a1c   e015     bz	0xa48                 	BZ	_00516_DS_
                                           ;	.line	907; usb.c	byte reportID = SetupPacket.wValue0;
000a1e   c542     movff	0x542, 0           	MOVFF	(_SetupPacket + 2), r0x00
000a20   f000
000a22   0105     movlb	0x5                	BANKSEL	(_SetupPacket + 3)
                                           ;	.line	911; usb.c	if (SetupPacket.wValue1 == 0x02)
000a24   5143     movf	0x43, 0, 0x1        	MOVF	(_SetupPacket + 3), W, B
000a26   0a02     xorlw	0x2                	XORLW	0x02
000a28   e106     bnz	0xa36                	BNZ	_00513_DS_
                                           ;	.line	914; usb.c	SetOutputReport(reportID);
000a2a   5000     movf	0, 0, 0             	MOVF	r0x00, W
000a2c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a2e   ec37     call	0x106e, 0           	CALL	_SetOutputReport
000a30   f008
000a32   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000a34   d009     bra	0xa48                	BRA	_00516_DS_
                                           _00513_DS_:
000a36   0105     movlb	0x5                	BANKSEL	(_SetupPacket + 3)
                                           ;	.line	916; usb.c	else if (SetupPacket.wValue1 == 0x03)
000a38   5143     movf	0x43, 0, 0x1        	MOVF	(_SetupPacket + 3), W, B
000a3a   0a03     xorlw	0x3                	XORLW	0x03
000a3c   e105     bnz	0xa48                	BNZ	_00516_DS_
                                           ;	.line	919; usb.c	SetFeatureReport(reportID);
000a3e   5000     movf	0, 0, 0             	MOVF	r0x00, W
000a40   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a42   ec83     call	0xf06, 0            	CALL	_SetFeatureReport
000a44   f007
000a46   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           _00516_DS_:
000a48   0104     movlb	0x4                	BANKSEL	_ep0Bo
                                           ;	.line	928; usb.c	if(ep0Bo.Stat & DTS)
000a4a   ad00     btfss	0, 0x6, 0x1        	BTFSS	_ep0Bo, 6, B
000a4c   d003     bra	0xa54                	BRA	_00518_DS_
                                           ;	.line	929; usb.c	ep0Bo.Stat = UOWN | DTSEN;
000a4e   0e88     movlw	0x88               	MOVLW	0x88
                                           ; removed redundant BANKSEL
000a50   6f00     movwf	0, 0x1             	MOVWF	_ep0Bo, B
000a52   d029     bra	0xaa6                	BRA	_00542_DS_
                                           _00518_DS_:
                                           ;	.line	931; usb.c	ep0Bo.Stat = UOWN | DTS | DTSEN;
000a54   0ec8     movlw	0xc8               	MOVLW	0xc8
000a56   0104     movlb	0x4                	BANKSEL	_ep0Bo
000a58   6f00     movwf	0, 0x1             	MOVWF	_ep0Bo, B
000a5a   d025     bra	0xaa6                	BRA	_00542_DS_
                                           _00521_DS_:
                                           ;	.line	936; usb.c	WaitForSetupStage();
000a5c   ec69     call	0xed2, 0            	CALL	_WaitForSetupStage
000a5e   f007
000a60   d022     bra	0xaa6                	BRA	_00542_DS_
                                           _00540_DS_:
                                           ;	.line	939; usb.c	else if(USTAT == 0x04)
000a62   506c     movf	0x6c, 0, 0          	MOVF	_USTAT, W
000a64   0a04     xorlw	0x4                	XORLW	0x04
000a66   e11f     bnz	0xaa6                	BNZ	_00542_DS_
                                           ;	.line	942; usb.c	if ((UADDR == 0) && (deviceState == ADDRESS))
000a68   506e     movf	0x6e, 0, 0          	MOVF	_UADDR, W
000a6a   e10b     bnz	0xa82                	BNZ	_00529_DS_
000a6c   0100     movlb	0                  	BANKSEL	_deviceState
000a6e   51d0     movf	0xd0, 0, 0x1        	MOVF	_deviceState, W, B
000a70   0a04     xorlw	0x4                	XORLW	0x04
000a72   e107     bnz	0xa82                	BNZ	_00529_DS_
                                           ;	.line	946; usb.c	UADDR = SetupPacket.wValue0;
000a74   c542     movff	0x542, 0xf6e       	MOVFF	(_SetupPacket + 2), _UADDR
000a76   ff6e
                                           ;	.line	950; usb.c	if(UADDR == 0)
000a78   506e     movf	0x6e, 0, 0          	MOVF	_UADDR, W
000a7a   e103     bnz	0xa82                	BNZ	_00529_DS_
                                           ;	.line	953; usb.c	deviceState = DEFAULT;
000a7c   0e03     movlw	0x3                	MOVLW	0x03
000a7e   0100     movlb	0                  	BANKSEL	_deviceState
000a80   6fd0     movwf	0xd0, 0x1          	MOVWF	_deviceState, B
                                           _00529_DS_:
000a82   0100     movlb	0                  	BANKSEL	_ctrlTransferStage
                                           ;	.line	956; usb.c	if (ctrlTransferStage == DATA_IN_STAGE)
000a84   51d2     movf	0xd2, 0, 0x1        	MOVF	_ctrlTransferStage, W, B
000a86   0a02     xorlw	0x2                	XORLW	0x02
000a88   e10c     bnz	0xaa2                	BNZ	_00535_DS_
                                           ;	.line	959; usb.c	InDataStage();
000a8a   ec15     call	0x2a, 0             	CALL	_InDataStage
000a8c   f000
000a8e   0104     movlb	0x4                	BANKSEL	_ep0Bi
                                           ;	.line	962; usb.c	if(ep0Bi.Stat & DTS)
000a90   ad04     btfss	0x4, 0x6, 0x1      	BTFSS	_ep0Bi, 6, B
000a92   d003     bra	0xa9a                	BRA	_00532_DS_
                                           ;	.line	963; usb.c	ep0Bi.Stat = UOWN | DTSEN;
000a94   0e88     movlw	0x88               	MOVLW	0x88
                                           ; removed redundant BANKSEL
000a96   6f04     movwf	0x4, 0x1           	MOVWF	_ep0Bi, B
000a98   d006     bra	0xaa6                	BRA	_00542_DS_
                                           _00532_DS_:
                                           ;	.line	965; usb.c	ep0Bi.Stat = UOWN | DTS | DTSEN;
000a9a   0ec8     movlw	0xc8               	MOVLW	0xc8
000a9c   0104     movlb	0x4                	BANKSEL	_ep0Bi
000a9e   6f04     movwf	0x4, 0x1           	MOVWF	_ep0Bi, B
000aa0   d002     bra	0xaa6                	BRA	_00542_DS_
                                           _00535_DS_:
                                           ;	.line	970; usb.c	WaitForSetupStage();
000aa2   ec69     call	0xed2, 0            	CALL	_WaitForSetupStage
000aa4   f007
                                           _00542_DS_:
000aa6   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000aa8   f000
000aaa   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_usb__WaitForSetupStage	code
                                           _WaitForSetupStage:
                                           ;	.line	871; usb.c	void WaitForSetupStage(void)
000ed2   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000ed4   ffe5
000ed6   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000ed8   ffe5
000eda   0100     movlb	0                  	BANKSEL	_ctrlTransferStage
                                           ;	.line	873; usb.c	ctrlTransferStage = SETUP_STAGE;
000edc   6bd2     clrf	0xd2, 0x1           	CLRF	_ctrlTransferStage, B
                                           ;	.line	874; usb.c	ep0Bo.Cnt = E0SZ;
000ede   0e20     movlw	0x20               	MOVLW	0x20
000ee0   0104     movlb	0x4                	BANKSEL	(_ep0Bo + 1)
000ee2   6f01     movwf	0x1, 0x1           	MOVWF	(_ep0Bo + 1), B
                                           ;	.line	875; usb.c	ep0Bo.ADDR = PTR16(&SetupPacket);
000ee4   0e40     movlw	0x40               	MOVLW	LOW(_SetupPacket)
000ee6   6e00     movwf	0, 0               	MOVWF	r0x00
000ee8   0e05     movlw	0x5                	MOVLW	HIGH(_SetupPacket)
000eea   6e01     movwf	0x1, 0             	MOVWF	r0x01
000eec   5000     movf	0, 0, 0             	MOVF	r0x00, W
                                           ; removed redundant BANKSEL
000eee   6f02     movwf	0x2, 0x1           	MOVWF	(_ep0Bo + 2), B
000ef0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
                                           ; removed redundant BANKSEL
000ef2   6f03     movwf	0x3, 0x1           	MOVWF	(_ep0Bo + 3), B
                                           ;	.line	876; usb.c	ep0Bo.Stat = UOWN | DTSEN; // Give to SIE, enable data toggle checks
000ef4   0e88     movlw	0x88               	MOVLW	0x88
000ef6   0104     movlb	0x4                	BANKSEL	_ep0Bo
000ef8   6f00     movwf	0, 0x1             	MOVWF	_ep0Bo, B
                                           ; removed redundant BANKSEL
                                           ;	.line	877; usb.c	ep0Bi.Stat = 0x00;         // Give control to CPU
000efa   6b04     clrf	0x4, 0x1            	CLRF	_ep0Bi, B
000efc   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000efe   f001
000f00   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000f02   f000
000f04   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_usb__SetupStage	code
                                           _SetupStage:
                                           ;	.line	803; usb.c	void SetupStage(void)
000466   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000468   ffe5
00046a   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00046c   ffe5
                                           ;	.line	807; usb.c	ep0Bi.Stat &= ~UOWN;
00046e   0e7f     movlw	0x7f               	MOVLW	0x7f
000470   0104     movlb	0x4                	BANKSEL	_ep0Bi
000472   1504     andwf	0x4, 0, 0x1        	ANDWF	_ep0Bi, W, B
                                           ; #	MOVWF	r0x00
                                           ; #	MOVF	r0x00, W
                                           ; ;     peep 2 - Removed redundant move
000474   6f04     movwf	0x4, 0x1           	MOVWF	_ep0Bi, B
                                           ;	.line	808; usb.c	ep0Bo.Stat &= ~UOWN;
000476   0e7f     movlw	0x7f               	MOVLW	0x7f
                                           ; removed redundant BANKSEL
000478   1500     andwf	0, 0, 0x1          	ANDWF	_ep0Bo, W, B
                                           ; #	MOVWF	r0x00
                                           ; #	MOVF	r0x00, W
                                           ; ;     peep 2 - Removed redundant move
00047a   6f00     movwf	0, 0x1             	MOVWF	_ep0Bo, B
00047c   0100     movlb	0                  	BANKSEL	_ctrlTransferStage
                                           ;	.line	811; usb.c	ctrlTransferStage = SETUP_STAGE;
00047e   6bd2     clrf	0xd2, 0x1           	CLRF	_ctrlTransferStage, B
000480   0100     movlb	0                  	BANKSEL	_requestHandled
                                           ;	.line	812; usb.c	requestHandled = 0; // Default is that request hasn't been handled
000482   6bca     clrf	0xca, 0x1           	CLRF	_requestHandled, B
000484   0100     movlb	0                  	BANKSEL	_HIDPostProcess
                                           ;	.line	813; usb.c	HIDPostProcess = 0; // Assume standard request until know otherwise
000486   6bcb     clrf	0xcb, 0x1           	CLRF	_HIDPostProcess, B
000488   0100     movlb	0                  	BANKSEL	_wCount
                                           ;	.line	814; usb.c	wCount = 0;         // No bytes transferred
00048a   6bc6     clrf	0xc6, 0x1           	CLRF	_wCount, B
                                           ; removed redundant BANKSEL
00048c   6bc7     clrf	0xc7, 0x1           	CLRF	(_wCount + 1), B
                                           ;	.line	817; usb.c	ProcessStandardRequest();
00048e   ec10     call	0x820, 0            	CALL	_ProcessStandardRequest
000490   f004
                                           ;	.line	820; usb.c	ProcessHIDRequest();
000492   ec31     call	0x262, 0            	CALL	_ProcessHIDRequest
000494   f001
000496   0100     movlb	0                  	BANKSEL	_requestHandled
                                           ;	.line	824; usb.c	if (!requestHandled)
000498   51ca     movf	0xca, 0, 0x1        	MOVF	_requestHandled, W, B
00049a   e110     bnz	0x4bc                	BNZ	_00491_DS_
                                           ;	.line	827; usb.c	ep0Bo.Cnt = E0SZ;
00049c   0e20     movlw	0x20               	MOVLW	0x20
00049e   0104     movlb	0x4                	BANKSEL	(_ep0Bo + 1)
0004a0   6f01     movwf	0x1, 0x1           	MOVWF	(_ep0Bo + 1), B
                                           ;	.line	828; usb.c	ep0Bo.ADDR = PTR16(&SetupPacket);
0004a2   0e40     movlw	0x40               	MOVLW	LOW(_SetupPacket)
0004a4   6e00     movwf	0, 0               	MOVWF	r0x00
0004a6   0e05     movlw	0x5                	MOVLW	HIGH(_SetupPacket)
0004a8   6e01     movwf	0x1, 0             	MOVWF	r0x01
0004aa   5000     movf	0, 0, 0             	MOVF	r0x00, W
                                           ; removed redundant BANKSEL
0004ac   6f02     movwf	0x2, 0x1           	MOVWF	(_ep0Bo + 2), B
0004ae   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
                                           ; removed redundant BANKSEL
0004b0   6f03     movwf	0x3, 0x1           	MOVWF	(_ep0Bo + 3), B
                                           ; #	MOVLW	0x84
                                           ; #	MOVWF	_ep0Bo, B
                                           ; #	MOVLW	0x84
                                           ; ;     peep 5 - Removed redundant move
                                           ;	.line	829; usb.c	ep0Bo.Stat = UOWN | BSTALL;
0004b2   0e84     movlw	0x84               	MOVLW	0x84
0004b4   0104     movlb	0x4                	BANKSEL	_ep0Bo
                                           ;	.line	830; usb.c	ep0Bi.Stat = UOWN | BSTALL;
0004b6   6f00     movwf	0, 0x1             	MOVWF	_ep0Bo, B
                                           ; removed redundant BANKSEL
0004b8   6f04     movwf	0x4, 0x1           	MOVWF	_ep0Bi, B
0004ba   d047     bra	0x54a                	BRA	_00492_DS_
                                           _00491_DS_:
0004bc   0105     movlb	0x5                	BANKSEL	_SetupPacket
                                           ;	.line	832; usb.c	else if (SetupPacket.bmRequestType & 0x80)
0004be   af40     btfss	0x40, 0x7, 0x1     	BTFSS	_SetupPacket, 7, B
0004c0   d02e     bra	0x51e                	BRA	_00488_DS_
0004c2   0100     movlb	0                  	BANKSEL	(_wCount + 1)
                                           ;	.line	835; usb.c	if(SetupPacket.wLength < wCount)
0004c4   51c7     movf	0xc7, 0, 0x1        	MOVF	(_wCount + 1), W, B
0004c6   0105     movlb	0x5                	BANKSEL	(_SetupPacket + 7)
0004c8   5d47     subwf	0x47, 0, 0x1       	SUBWF	(_SetupPacket + 7), W, B
0004ca   e104     bnz	0x4d4                	BNZ	_00501_DS_
0004cc   0100     movlb	0                  	BANKSEL	_wCount
0004ce   51c6     movf	0xc6, 0, 0x1        	MOVF	_wCount, W, B
0004d0   0105     movlb	0x5                	BANKSEL	(_SetupPacket + 6)
0004d2   5d46     subwf	0x46, 0, 0x1       	SUBWF	(_SetupPacket + 6), W, B
                                           _00501_DS_:
0004d4   e204     bc	0x4de                 	BC	_00486_DS_
                                           ;	.line	836; usb.c	wCount = SetupPacket.wLength;
0004d6   c546     movff	0x546, 0xc6        	MOVFF	(_SetupPacket + 6), _wCount
0004d8   f0c6
0004da   c547     movff	0x547, 0xc7        	MOVFF	(_SetupPacket + 7), (_wCount + 1)
0004dc   f0c7
                                           _00486_DS_:
                                           ;	.line	837; usb.c	InDataStage();
0004de   ec15     call	0x2a, 0             	CALL	_InDataStage
0004e0   f000
                                           ;	.line	838; usb.c	ctrlTransferStage = DATA_IN_STAGE;
0004e2   0e02     movlw	0x2                	MOVLW	0x02
0004e4   0100     movlb	0                  	BANKSEL	_ctrlTransferStage
0004e6   6fd2     movwf	0xd2, 0x1          	MOVWF	_ctrlTransferStage, B
                                           ;	.line	840; usb.c	ep0Bo.Cnt = E0SZ;
0004e8   0e20     movlw	0x20               	MOVLW	0x20
0004ea   0104     movlb	0x4                	BANKSEL	(_ep0Bo + 1)
0004ec   6f01     movwf	0x1, 0x1           	MOVWF	(_ep0Bo + 1), B
                                           ;	.line	841; usb.c	ep0Bo.ADDR = PTR16(&SetupPacket);
0004ee   0e40     movlw	0x40               	MOVLW	LOW(_SetupPacket)
0004f0   6e00     movwf	0, 0               	MOVWF	r0x00
0004f2   0e05     movlw	0x5                	MOVLW	HIGH(_SetupPacket)
0004f4   6e01     movwf	0x1, 0             	MOVWF	r0x01
0004f6   5000     movf	0, 0, 0             	MOVF	r0x00, W
                                           ; removed redundant BANKSEL
0004f8   6f02     movwf	0x2, 0x1           	MOVWF	(_ep0Bo + 2), B
0004fa   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
                                           ; removed redundant BANKSEL
0004fc   6f03     movwf	0x3, 0x1           	MOVWF	(_ep0Bo + 3), B
                                           ;	.line	842; usb.c	ep0Bo.Stat = UOWN;
0004fe   0e80     movlw	0x80               	MOVLW	0x80
000500   0104     movlb	0x4                	BANKSEL	_ep0Bo
000502   6f00     movwf	0, 0x1             	MOVWF	_ep0Bo, B
                                           ;	.line	845; usb.c	ep0Bi.ADDR = PTR16(&controlTransferBuffer);
000504   0e80     movlw	0x80               	MOVLW	LOW(_controlTransferBuffer)
000506   6e00     movwf	0, 0               	MOVWF	r0x00
000508   0e05     movlw	0x5                	MOVLW	HIGH(_controlTransferBuffer)
00050a   6e01     movwf	0x1, 0             	MOVWF	r0x01
00050c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00050e   0104     movlb	0x4                	BANKSEL	(_ep0Bi + 2)
000510   6f06     movwf	0x6, 0x1           	MOVWF	(_ep0Bi + 2), B
000512   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
                                           ; removed redundant BANKSEL
000514   6f07     movwf	0x7, 0x1           	MOVWF	(_ep0Bi + 3), B
                                           ;	.line	847; usb.c	ep0Bi.Stat = UOWN | DTS | DTSEN; 
000516   0ec8     movlw	0xc8               	MOVLW	0xc8
000518   0104     movlb	0x4                	BANKSEL	_ep0Bi
00051a   6f04     movwf	0x4, 0x1           	MOVWF	_ep0Bi, B
00051c   d016     bra	0x54a                	BRA	_00492_DS_
                                           _00488_DS_:
                                           ;	.line	852; usb.c	ctrlTransferStage = DATA_OUT_STAGE;
00051e   0e01     movlw	0x1                	MOVLW	0x01
000520   0100     movlb	0                  	BANKSEL	_ctrlTransferStage
000522   6fd2     movwf	0xd2, 0x1          	MOVWF	_ctrlTransferStage, B
000524   0104     movlb	0x4                	BANKSEL	(_ep0Bi + 1)
                                           ;	.line	855; usb.c	ep0Bi.Cnt = 0;
000526   6b05     clrf	0x5, 0x1            	CLRF	(_ep0Bi + 1), B
                                           ;	.line	856; usb.c	ep0Bi.Stat = UOWN | DTS | DTSEN;
000528   0ec8     movlw	0xc8               	MOVLW	0xc8
00052a   0104     movlb	0x4                	BANKSEL	_ep0Bi
00052c   6f04     movwf	0x4, 0x1           	MOVWF	_ep0Bi, B
                                           ;	.line	859; usb.c	ep0Bo.Cnt = E0SZ;
00052e   0e20     movlw	0x20               	MOVLW	0x20
000530   0104     movlb	0x4                	BANKSEL	(_ep0Bo + 1)
000532   6f01     movwf	0x1, 0x1           	MOVWF	(_ep0Bo + 1), B
                                           ;	.line	860; usb.c	ep0Bo.ADDR = PTR16(&controlTransferBuffer);
000534   0e80     movlw	0x80               	MOVLW	LOW(_controlTransferBuffer)
000536   6e00     movwf	0, 0               	MOVWF	r0x00
000538   0e05     movlw	0x5                	MOVLW	HIGH(_controlTransferBuffer)
00053a   6e01     movwf	0x1, 0             	MOVWF	r0x01
00053c   5000     movf	0, 0, 0             	MOVF	r0x00, W
                                           ; removed redundant BANKSEL
00053e   6f02     movwf	0x2, 0x1           	MOVWF	(_ep0Bo + 2), B
000540   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
                                           ; removed redundant BANKSEL
000542   6f03     movwf	0x3, 0x1           	MOVWF	(_ep0Bo + 3), B
                                           ;	.line	862; usb.c	ep0Bo.Stat = UOWN | DTS | DTSEN;
000544   0ec8     movlw	0xc8               	MOVLW	0xc8
000546   0104     movlb	0x4                	BANKSEL	_ep0Bo
000548   6f00     movwf	0, 0x1             	MOVWF	_ep0Bo, B
                                           _00492_DS_:
                                           ;	.line	866; usb.c	UCONbits.PKTDIS = 0;
00054a   986d     bcf	0x6d, 0x4, 0         	BCF	_UCONbits, 4
00054c   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00054e   f001
000550   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000552   f000
000554   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_usb__OutDataStage	code
                                           _OutDataStage:
                                           ;	.line	770; usb.c	void OutDataStage(void)
000556   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000558   ffe5
00055a   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00055c   ffe5
00055e   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000560   ffe5
000562   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000564   ffe5
000566   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000568   ffe5
00056a   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00056c   ffe5
00056e   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
000570   ffe5
000572   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
000574   ffe5
000576   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
000578   ffe5
00057a   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
00057c   ffe5
                                           ;	.line	774; usb.c	bufferSize = ((0x03 & ep0Bo.Stat) << 8) | ep0Bo.Cnt;
00057e   0e03     movlw	0x3                	MOVLW	0x03
000580   0104     movlb	0x4                	BANKSEL	_ep0Bo
000582   1500     andwf	0, 0, 0x1          	ANDWF	_ep0Bo, W, B
000584   6a01     clrf	0x1, 0              	CLRF	r0x01
000586   6e03     movwf	0x3, 0             	MOVWF	r0x03
000588   6a02     clrf	0x2, 0              	CLRF	r0x02
00058a   c401     movff	0x401, 0           	MOVFF	(_ep0Bo + 1), r0x00
00058c   f000
00058e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000590   1200     iorwf	0, 0x1, 0          	IORWF	r0x00, F
000592   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000594   1201     iorwf	0x1, 0x1, 0        	IORWF	r0x01, F
                                           ;	.line	781; usb.c	wCount = wCount + bufferSize;
000596   5000     movf	0, 0, 0             	MOVF	r0x00, W
000598   0100     movlb	0                  	BANKSEL	_wCount
00059a   27c6     addwf	0xc6, 0x1, 0x1     	ADDWF	_wCount, F, B
00059c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
                                           ; removed redundant BANKSEL
00059e   23c7     addwfc	0xc7, 0x1, 0x1    	ADDWFC	(_wCount + 1), F, B
                                           ;	.line	783; usb.c	outPtr = (byte*)&controlTransferBuffer;
0005a0   0e05     movlw	0x5                	MOVLW	HIGH(_controlTransferBuffer)
0005a2   0100     movlb	0                  	BANKSEL	(_outPtr + 1)
0005a4   6fc1     movwf	0xc1, 0x1          	MOVWF	(_outPtr + 1), B
0005a6   0e80     movlw	0x80               	MOVLW	LOW(_controlTransferBuffer)
                                           ; removed redundant BANKSEL
0005a8   6fc0     movwf	0xc0, 0x1          	MOVWF	_outPtr, B
0005aa   0e80     movlw	0x80               	MOVLW	0x80
                                           ; removed redundant BANKSEL
0005ac   6fc2     movwf	0xc2, 0x1          	MOVWF	(_outPtr + 2), B
                                           ;	.line	787; usb.c	for (i=0;i<bufferSize;i++)
0005ae   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00470_DS_:
0005b0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0005b2   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
0005b4   e102     bnz	0x5ba                	BNZ	_00480_DS_
0005b6   5000     movf	0, 0, 0             	MOVF	r0x00, W
0005b8   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00480_DS_:
0005ba   e22f     bc	0x61a                 	BC	_00474_DS_
                                           ;	.line	792; usb.c	*inPtr++ = *outPtr++;
0005bc   c0c3     movff	0xc3, 0x4          	MOVFF	_inPtr, r0x04
0005be   f004
0005c0   c0c4     movff	0xc4, 0x5          	MOVFF	(_inPtr + 1), r0x05
0005c2   f005
0005c4   c0c5     movff	0xc5, 0x6          	MOVFF	(_inPtr + 2), r0x06
0005c6   f006
0005c8   c0c0     movff	0xc0, 0x7          	MOVFF	_outPtr, r0x07
0005ca   f007
0005cc   c0c1     movff	0xc1, 0x8          	MOVFF	(_outPtr + 1), r0x08
0005ce   f008
0005d0   c0c2     movff	0xc2, 0x9          	MOVFF	(_outPtr + 2), r0x09
0005d2   f009
0005d4   c007     movff	0x7, 0xfe9         	MOVFF	r0x07, FSR0L
0005d6   ffe9
0005d8   c008     movff	0x8, 0xff3         	MOVFF	r0x08, PRODL
0005da   fff3
0005dc   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
0005de   ec26     call	0x104c, 0           	CALL	__gptrget1
0005e0   f008
0005e2   6e07     movwf	0x7, 0             	MOVWF	r0x07
0005e4   0100     movlb	0                  	BANKSEL	_outPtr
0005e6   2bc0     incf	0xc0, 0x1, 0x1      	INCF	_outPtr, F, B
0005e8   e301     bnc	0x5ec                	BNC	_10628_DS_
                                           ; removed redundant BANKSEL
0005ea   2bc1     incf	0xc1, 0x1, 0x1      	INCF	(_outPtr + 1), F, B
                                           _10628_DS_:
0005ec   e302     bnc	0x5f2                	BNC	_20629_DS_
0005ee   0100     movlb	0                  	BANKSEL	(_outPtr + 2)
0005f0   2bc2     incf	0xc2, 0x1, 0x1      	INCF	(_outPtr + 2), F, B
                                           _20629_DS_:
0005f2   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0005f4   ffe5
0005f6   c004     movff	0x4, 0xfe9         	MOVFF	r0x04, FSR0L
0005f8   ffe9
0005fa   c005     movff	0x5, 0xff3         	MOVFF	r0x05, PRODL
0005fc   fff3
0005fe   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000600   ec62     call	0x10c4, 0           	CALL	__gptrput1
000602   f008
000604   0100     movlb	0                  	BANKSEL	_inPtr
000606   2bc3     incf	0xc3, 0x1, 0x1      	INCF	_inPtr, F, B
000608   e301     bnc	0x60c                	BNC	_30630_DS_
                                           ; removed redundant BANKSEL
00060a   2bc4     incf	0xc4, 0x1, 0x1      	INCF	(_inPtr + 1), F, B
                                           _30630_DS_:
00060c   e302     bnc	0x612                	BNC	_40631_DS_
00060e   0100     movlb	0                  	BANKSEL	(_inPtr + 2)
000610   2bc5     incf	0xc5, 0x1, 0x1      	INCF	(_inPtr + 2), F, B
                                           _40631_DS_:
                                           ;	.line	787; usb.c	for (i=0;i<bufferSize;i++)
000612   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
000614   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000616   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
000618   d7cb     bra	0x5b0                	BRA	_00470_DS_
                                           _00474_DS_:
00061a   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
00061c   f009
00061e   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
000620   f008
000622   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
000624   f007
000626   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
000628   f006
00062a   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00062c   f005
00062e   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
000630   f004
000632   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000634   f003
000636   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000638   f002
00063a   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00063c   f001
00063e   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000640   f000
000642   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_usb__InDataStage	code
                                           _InDataStage:
                                           ;	.line	725; usb.c	void InDataStage(void)
00002a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00002c   ffe5
00002e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000030   ffe5
000032   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000034   ffe5
000036   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000038   ffe5
00003a   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00003c   ffe5
00003e   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000040   ffe5
000042   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
000044   ffe5
000046   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
000048   ffe5
00004a   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
00004c   ffe5
                                           ;	.line	733; usb.c	if(wCount < E0SZ)
00004e   0e00     movlw	0                  	MOVLW	0x00
000050   0100     movlb	0                  	BANKSEL	(_wCount + 1)
000052   5dc7     subwf	0xc7, 0, 0x1       	SUBWF	(_wCount + 1), W, B
000054   e102     bnz	0x5a                 	BNZ	_00460_DS_
000056   0e20     movlw	0x20               	MOVLW	0x20
                                           ; removed redundant BANKSEL
000058   5dc6     subwf	0xc6, 0, 0x1       	SUBWF	_wCount, W, B
                                           _00460_DS_:
00005a   e205     bc	0x66                  	BC	_00448_DS_
                                           ;	.line	734; usb.c	bufferSize = wCount;
00005c   c0c6     movff	0xc6, 0            	MOVFF	_wCount, r0x00
00005e   f000
000060   c0c7     movff	0xc7, 0x1          	MOVFF	(_wCount + 1), r0x01
000062   f001
000064   d003     bra	0x6c                 	BRA	_00449_DS_
                                           _00448_DS_:
                                           ;	.line	736; usb.c	bufferSize = E0SZ;
000066   0e20     movlw	0x20               	MOVLW	0x20
000068   6e00     movwf	0, 0               	MOVWF	r0x00
00006a   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           _00449_DS_:
                                           ;	.line	743; usb.c	ep0Bi.Stat &= ~(BC8 | BC9); // Clear BC8 and BC9
00006c   0efc     movlw	0xfc               	MOVLW	0xfc
00006e   0104     movlb	0x4                	BANKSEL	_ep0Bi
000070   1504     andwf	0x4, 0, 0x1        	ANDWF	_ep0Bi, W, B
                                           ; #	MOVWF	r0x02
                                           ; #	MOVF	r0x02, W
                                           ; ;     peep 2 - Removed redundant move
000072   6f04     movwf	0x4, 0x1           	MOVWF	_ep0Bi, B
                                           ;	.line	744; usb.c	ep0Bi.Stat |= (byte)((bufferSize & 0x0300) >> 8);
000074   0e03     movlw	0x3                	MOVLW	0x03
000076   1401     andwf	0x1, 0, 0          	ANDWF	r0x01, W
                                           ; #	MOVWF	r0x03
                                           ; #	MOVF	r0x03, W
                                           ; ;     peep 2 - Removed redundant move
000078   6e02     movwf	0x2, 0             	MOVWF	r0x02
                                           ; removed redundant BANKSEL
00007a   5104     movf	0x4, 0, 0x1         	MOVF	_ep0Bi, W, B
00007c   1202     iorwf	0x2, 0x1, 0        	IORWF	r0x02, F
00007e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
                                           ; removed redundant BANKSEL
000080   6f04     movwf	0x4, 0x1           	MOVWF	_ep0Bi, B
                                           ; #	MOVF	r0x00, W
                                           ; #	MOVWF	r0x02
                                           ; #	MOVF	r0x02, W
                                           ; ;     peep 9c - Removed redundant move
                                           ;	.line	745; usb.c	ep0Bi.Cnt = (byte)(bufferSize & 0xFF);
000082   5000     movf	0, 0, 0             	MOVF	r0x00, W
000084   6e02     movwf	0x2, 0             	MOVWF	r0x02
000086   0104     movlb	0x4                	BANKSEL	(_ep0Bi + 1)
000088   6f05     movwf	0x5, 0x1           	MOVWF	(_ep0Bi + 1), B
                                           ;	.line	746; usb.c	ep0Bi.ADDR = PTR16(&controlTransferBuffer);
00008a   0e80     movlw	0x80               	MOVLW	LOW(_controlTransferBuffer)
00008c   6e02     movwf	0x2, 0             	MOVWF	r0x02
00008e   0e05     movlw	0x5                	MOVLW	HIGH(_controlTransferBuffer)
000090   6e03     movwf	0x3, 0             	MOVWF	r0x03
000092   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
                                           ; removed redundant BANKSEL
000094   6f06     movwf	0x6, 0x1           	MOVWF	(_ep0Bi + 2), B
000096   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
                                           ; removed redundant BANKSEL
000098   6f07     movwf	0x7, 0x1           	MOVWF	(_ep0Bi + 3), B
                                           ;	.line	751; usb.c	wCount = wCount - bufferSize;
00009a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00009c   0100     movlb	0                  	BANKSEL	_wCount
00009e   5fc6     subwf	0xc6, 0x1, 0x1     	SUBWF	_wCount, F, B
0000a0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
                                           ; removed redundant BANKSEL
0000a2   5bc7     subwfb	0xc7, 0x1, 0x1    	SUBWFB	(_wCount + 1), F, B
                                           ;	.line	754; usb.c	inPtr = (byte *)&controlTransferBuffer;
0000a4   0e05     movlw	0x5                	MOVLW	HIGH(_controlTransferBuffer)
0000a6   0100     movlb	0                  	BANKSEL	(_inPtr + 1)
0000a8   6fc4     movwf	0xc4, 0x1          	MOVWF	(_inPtr + 1), B
0000aa   0e80     movlw	0x80               	MOVLW	LOW(_controlTransferBuffer)
                                           ; removed redundant BANKSEL
0000ac   6fc3     movwf	0xc3, 0x1          	MOVWF	_inPtr, B
0000ae   0e80     movlw	0x80               	MOVLW	0x80
                                           ; removed redundant BANKSEL
0000b0   6fc5     movwf	0xc5, 0x1          	MOVWF	(_inPtr + 2), B
                                           ;	.line	759; usb.c	for (i=0;i<bufferSize;i++)
0000b2   6a02     clrf	0x2, 0              	CLRF	r0x02
                                           _00450_DS_:
0000b4   c002     movff	0x2, 0x3           	MOVFF	r0x02, r0x03
0000b6   f003
0000b8   6a04     clrf	0x4, 0              	CLRF	r0x04
0000ba   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0000bc   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
0000be   e102     bnz	0xc4                 	BNZ	_00465_DS_
0000c0   5000     movf	0, 0, 0             	MOVF	r0x00, W
0000c2   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
                                           _00465_DS_:
0000c4   e22d     bc	0x120                 	BC	_00454_DS_
                                           ;	.line	764; usb.c	*inPtr++ = *outPtr++;
0000c6   c0c3     movff	0xc3, 0x3          	MOVFF	_inPtr, r0x03
0000c8   f003
0000ca   c0c4     movff	0xc4, 0x4          	MOVFF	(_inPtr + 1), r0x04
0000cc   f004
0000ce   c0c5     movff	0xc5, 0x5          	MOVFF	(_inPtr + 2), r0x05
0000d0   f005
0000d2   c0c0     movff	0xc0, 0x6          	MOVFF	_outPtr, r0x06
0000d4   f006
0000d6   c0c1     movff	0xc1, 0x7          	MOVFF	(_outPtr + 1), r0x07
0000d8   f007
0000da   c0c2     movff	0xc2, 0x8          	MOVFF	(_outPtr + 2), r0x08
0000dc   f008
0000de   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
0000e0   ffe9
0000e2   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
0000e4   fff3
0000e6   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0000e8   ec26     call	0x104c, 0           	CALL	__gptrget1
0000ea   f008
0000ec   6e06     movwf	0x6, 0             	MOVWF	r0x06
0000ee   0100     movlb	0                  	BANKSEL	_outPtr
0000f0   2bc0     incf	0xc0, 0x1, 0x1      	INCF	_outPtr, F, B
0000f2   e301     bnc	0xf6                 	BNC	_50632_DS_
                                           ; removed redundant BANKSEL
0000f4   2bc1     incf	0xc1, 0x1, 0x1      	INCF	(_outPtr + 1), F, B
                                           _50632_DS_:
0000f6   e302     bnc	0xfc                 	BNC	_60633_DS_
0000f8   0100     movlb	0                  	BANKSEL	(_outPtr + 2)
0000fa   2bc2     incf	0xc2, 0x1, 0x1      	INCF	(_outPtr + 2), F, B
                                           _60633_DS_:
0000fc   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0000fe   ffe5
000100   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
000102   ffe9
000104   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
000106   fff3
000108   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00010a   ec62     call	0x10c4, 0           	CALL	__gptrput1
00010c   f008
00010e   0100     movlb	0                  	BANKSEL	_inPtr
000110   2bc3     incf	0xc3, 0x1, 0x1      	INCF	_inPtr, F, B
000112   e301     bnc	0x116                	BNC	_70634_DS_
                                           ; removed redundant BANKSEL
000114   2bc4     incf	0xc4, 0x1, 0x1      	INCF	(_inPtr + 1), F, B
                                           _70634_DS_:
000116   e302     bnc	0x11c                	BNC	_80635_DS_
000118   0100     movlb	0                  	BANKSEL	(_inPtr + 2)
00011a   2bc5     incf	0xc5, 0x1, 0x1      	INCF	(_inPtr + 2), F, B
                                           _80635_DS_:
                                           ;	.line	759; usb.c	for (i=0;i<bufferSize;i++)
00011c   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
00011e   d7ca     bra	0xb4                 	BRA	_00450_DS_
                                           _00454_DS_:
000120   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
000122   f008
000124   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
000126   f007
000128   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
00012a   f006
00012c   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00012e   f005
000130   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
000132   f004
000134   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000136   f003
000138   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00013a   f002
00013c   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00013e   f001
000140   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000142   f000
000144   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_usb__ProcessStandardRequest	code
                                           _ProcessStandardRequest:
                                           ;	.line	616; usb.c	void ProcessStandardRequest(void)
000820   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000822   ffe5
000824   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000826   ffe5
                                           ;	.line	618; usb.c	byte request = SetupPacket.bRequest;
000828   c541     movff	0x541, 0           	MOVFF	(_SetupPacket + 1), r0x00
00082a   f000
                                           ;	.line	620; usb.c	if((SetupPacket.bmRequestType & 0x60) != 0x00)
00082c   0e60     movlw	0x60               	MOVLW	0x60
00082e   0105     movlb	0x5                	BANKSEL	_SetupPacket
000830   1540     andwf	0x40, 0, 0x1       	ANDWF	_SetupPacket, W, B
000832   6e01     movwf	0x1, 0             	MOVWF	r0x01
000834   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000836   e001     bz	0x83a                 	BZ	_00379_DS_
                                           ;	.line	623; usb.c	return;
000838   d061     bra	0x8fc                	BRA	_00411_DS_
                                           _00379_DS_:
                                           ;	.line	625; usb.c	if (request == SET_ADDRESS)
00083a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00083c   0a05     xorlw	0x5                	XORLW	0x05
00083e   e109     bnz	0x852                	BNZ	_00409_DS_
                                           ;	.line	634; usb.c	requestHandled = 1;
000840   0e01     movlw	0x1                	MOVLW	0x01
000842   0100     movlb	0                  	BANKSEL	_requestHandled
000844   6fca     movwf	0xca, 0x1          	MOVWF	_requestHandled, B
                                           ;	.line	635; usb.c	deviceState = ADDRESS;
000846   0e04     movlw	0x4                	MOVLW	0x04
000848   0100     movlb	0                  	BANKSEL	_deviceState
00084a   6fd0     movwf	0xd0, 0x1          	MOVWF	_deviceState, B
                                           ;	.line	636; usb.c	deviceAddress = SetupPacket.wValue0;
00084c   c542     movff	0x542, 0xc8        	MOVFF	(_SetupPacket + 2), _deviceAddress
00084e   f0c8
000850   d055     bra	0x8fc                	BRA	_00411_DS_
                                           _00409_DS_:
                                           ;	.line	638; usb.c	else if (request == GET_DESCRIPTOR)
000852   5000     movf	0, 0, 0             	MOVF	r0x00, W
000854   0a06     xorlw	0x6                	XORLW	0x06
000856   e103     bnz	0x85e                	BNZ	_00406_DS_
                                           ;	.line	640; usb.c	GetDescriptor();
000858   ec22     call	0x644, 0            	CALL	_GetDescriptor
00085a   f003
00085c   d04f     bra	0x8fc                	BRA	_00411_DS_
                                           _00406_DS_:
                                           ;	.line	642; usb.c	else if (request == SET_CONFIGURATION)
00085e   5000     movf	0, 0, 0             	MOVF	r0x00, W
000860   0a09     xorlw	0x9                	XORLW	0x09
000862   e112     bnz	0x888                	BNZ	_00403_DS_
                                           ;	.line	647; usb.c	requestHandled = 1;
000864   0e01     movlw	0x1                	MOVLW	0x01
000866   0100     movlb	0                  	BANKSEL	_requestHandled
000868   6fca     movwf	0xca, 0x1          	MOVWF	_requestHandled, B
                                           ;	.line	648; usb.c	currentConfiguration = SetupPacket.wValue0;
00086a   c542     movff	0x542, 0xd1        	MOVFF	(_SetupPacket + 2), _currentConfiguration
00086c   f0d1
00086e   0100     movlb	0                  	BANKSEL	_currentConfiguration
                                           ;	.line	651; usb.c	if (currentConfiguration == 0)
000870   51d1     movf	0xd1, 0, 0x1        	MOVF	_currentConfiguration, W, B
000872   e104     bnz	0x87c                	BNZ	_00381_DS_
                                           ;	.line	654; usb.c	deviceState = ADDRESS;
000874   0e04     movlw	0x4                	MOVLW	0x04
000876   0100     movlb	0                  	BANKSEL	_deviceState
000878   6fd0     movwf	0xd0, 0x1          	MOVWF	_deviceState, B
00087a   d040     bra	0x8fc                	BRA	_00411_DS_
                                           _00381_DS_:
                                           ;	.line	658; usb.c	deviceState = CONFIGURED;
00087c   0e05     movlw	0x5                	MOVLW	0x05
00087e   0100     movlb	0                  	BANKSEL	_deviceState
000880   6fd0     movwf	0xd0, 0x1          	MOVWF	_deviceState, B
                                           ;	.line	661; usb.c	HIDInitEndpoint();
000882   ec8b     call	0xd16, 0            	CALL	_HIDInitEndpoint
000884   f006
000886   d03a     bra	0x8fc                	BRA	_00411_DS_
                                           _00403_DS_:
                                           ;	.line	667; usb.c	else if (request == GET_CONFIGURATION)
000888   5000     movf	0, 0, 0             	MOVF	r0x00, W
00088a   0a08     xorlw	0x8                	XORLW	0x08
00088c   e10f     bnz	0x8ac                	BNZ	_00400_DS_
                                           ;	.line	672; usb.c	requestHandled = 1;
00088e   0e01     movlw	0x1                	MOVLW	0x01
000890   0100     movlb	0                  	BANKSEL	_requestHandled
000892   6fca     movwf	0xca, 0x1          	MOVWF	_requestHandled, B
                                           ;	.line	673; usb.c	outPtr = (byte*)&currentConfiguration;
000894   0e00     movlw	0                  	MOVLW	HIGH(_currentConfiguration)
000896   0100     movlb	0                  	BANKSEL	(_outPtr + 1)
000898   6fc1     movwf	0xc1, 0x1          	MOVWF	(_outPtr + 1), B
00089a   0ed1     movlw	0xd1               	MOVLW	LOW(_currentConfiguration)
                                           ; removed redundant BANKSEL
00089c   6fc0     movwf	0xc0, 0x1          	MOVWF	_outPtr, B
00089e   0e80     movlw	0x80               	MOVLW	0x80
                                           ; removed redundant BANKSEL
0008a0   6fc2     movwf	0xc2, 0x1          	MOVWF	(_outPtr + 2), B
                                           ;	.line	674; usb.c	wCount = 1;
0008a2   0e01     movlw	0x1                	MOVLW	0x01
0008a4   0100     movlb	0                  	BANKSEL	_wCount
0008a6   6fc6     movwf	0xc6, 0x1          	MOVWF	_wCount, B
                                           ; removed redundant BANKSEL
0008a8   6bc7     clrf	0xc7, 0x1           	CLRF	(_wCount + 1), B
0008aa   d028     bra	0x8fc                	BRA	_00411_DS_
                                           _00400_DS_:
                                           ;	.line	676; usb.c	else if (request == GET_STATUS)
0008ac   5000     movf	0, 0, 0             	MOVF	r0x00, W
0008ae   e103     bnz	0x8b6                	BNZ	_00397_DS_
                                           ;	.line	678; usb.c	GetStatus();
0008b0   ecba     call	0x374, 0            	CALL	_GetStatus
0008b2   f001
0008b4   d023     bra	0x8fc                	BRA	_00411_DS_
                                           _00397_DS_:
                                           ;	.line	680; usb.c	else if ((request == CLEAR_FEATURE) ||
0008b6   5000     movf	0, 0, 0             	MOVF	r0x00, W
0008b8   0a01     xorlw	0x1                	XORLW	0x01
0008ba   e003     bz	0x8c2                 	BZ	_00392_DS_
                                           ;	.line	681; usb.c	(request == SET_FEATURE))
0008bc   5000     movf	0, 0, 0             	MOVF	r0x00, W
0008be   0a03     xorlw	0x3                	XORLW	0x03
0008c0   e103     bnz	0x8c8                	BNZ	_00393_DS_
                                           _00392_DS_:
                                           ;	.line	683; usb.c	SetFeature();
0008c2   eca3     call	0x146, 0            	CALL	_SetFeature
0008c4   f000
0008c6   d01a     bra	0x8fc                	BRA	_00411_DS_
                                           _00393_DS_:
                                           ;	.line	685; usb.c	else if (request == GET_INTERFACE)
0008c8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0008ca   0a0a     xorlw	0xa                	XORLW	0x0a
0008cc   e111     bnz	0x8f0                	BNZ	_00390_DS_
                                           ;	.line	692; usb.c	requestHandled = 1;
0008ce   0e01     movlw	0x1                	MOVLW	0x01
0008d0   0100     movlb	0                  	BANKSEL	_requestHandled
0008d2   6fca     movwf	0xca, 0x1          	MOVWF	_requestHandled, B
0008d4   0105     movlb	0x5                	BANKSEL	_controlTransferBuffer
                                           ;	.line	693; usb.c	controlTransferBuffer[0] = 0;
0008d6   6b80     clrf	0x80, 0x1           	CLRF	_controlTransferBuffer, B
                                           ;	.line	694; usb.c	outPtr = &controlTransferBuffer;
0008d8   0e05     movlw	0x5                	MOVLW	HIGH(_controlTransferBuffer)
0008da   0100     movlb	0                  	BANKSEL	(_outPtr + 1)
0008dc   6fc1     movwf	0xc1, 0x1          	MOVWF	(_outPtr + 1), B
0008de   0e80     movlw	0x80               	MOVLW	LOW(_controlTransferBuffer)
                                           ; removed redundant BANKSEL
0008e0   6fc0     movwf	0xc0, 0x1          	MOVWF	_outPtr, B
0008e2   0e80     movlw	0x80               	MOVLW	0x80
                                           ; removed redundant BANKSEL
0008e4   6fc2     movwf	0xc2, 0x1          	MOVWF	(_outPtr + 2), B
                                           ;	.line	695; usb.c	wCount = 1;
0008e6   0e01     movlw	0x1                	MOVLW	0x01
0008e8   0100     movlb	0                  	BANKSEL	_wCount
0008ea   6fc6     movwf	0xc6, 0x1          	MOVWF	_wCount, B
                                           ; removed redundant BANKSEL
0008ec   6bc7     clrf	0xc7, 0x1           	CLRF	(_wCount + 1), B
0008ee   d006     bra	0x8fc                	BRA	_00411_DS_
                                           _00390_DS_:
                                           ;	.line	697; usb.c	else if (request == SET_INTERFACE)
0008f0   5000     movf	0, 0, 0             	MOVF	r0x00, W
0008f2   0a0b     xorlw	0xb                	XORLW	0x0b
0008f4   e103     bnz	0x8fc                	BNZ	_00411_DS_
                                           ;	.line	703; usb.c	requestHandled = 1;
0008f6   0e01     movlw	0x1                	MOVLW	0x01
0008f8   0100     movlb	0                  	BANKSEL	_requestHandled
0008fa   6fca     movwf	0xca, 0x1          	MOVWF	_requestHandled, B
                                           _00411_DS_:
                                           ;	.line	711; usb.c	else if (request == SYNCH_FRAME)
0008fc   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0008fe   f001
000900   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000902   f000
000904   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_usb__SetFeature	code
                                           _SetFeature:
                                           ;	.line	567; usb.c	static void SetFeature(void)
000146   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000148   ffe5
00014a   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00014c   ffe5
00014e   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000150   ffe5
000152   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000154   ffe5
                                           ;	.line	569; usb.c	byte recipient = SetupPacket.bmRequestType & 0x1F;
000156   0e1f     movlw	0x1f               	MOVLW	0x1f
000158   0105     movlb	0x5                	BANKSEL	_SetupPacket
00015a   1540     andwf	0x40, 0, 0x1       	ANDWF	_SetupPacket, W, B
00015c   6e00     movwf	0, 0               	MOVWF	r0x00
                                           ;	.line	570; usb.c	byte feature = SetupPacket.wValue0;
00015e   c542     movff	0x542, 0x1         	MOVFF	(_SetupPacket + 2), r0x01
000160   f001
                                           ;	.line	575; usb.c	if (recipient == 0x00)
000162   5000     movf	0, 0, 0             	MOVF	r0x00, W
000164   e112     bnz	0x18a                	BNZ	_00346_DS_
                                           ;	.line	578; usb.c	if (feature == DEVICE_REMOTE_WAKEUP)
000166   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000168   0a01     xorlw	0x1                	XORLW	0x01
00016a   e001     bz	0x16e                 	BZ	_00361_DS_
00016c   d071     bra	0x250                	BRA	_00348_DS_
                                           _00361_DS_:
                                           ;	.line	580; usb.c	requestHandled = 1;
00016e   0e01     movlw	0x1                	MOVLW	0x01
000170   0100     movlb	0                  	BANKSEL	_requestHandled
000172   6fca     movwf	0xca, 0x1          	MOVWF	_requestHandled, B
000174   0105     movlb	0x5                	BANKSEL	(_SetupPacket + 1)
                                           ;	.line	581; usb.c	if (SetupPacket.bRequest == SET_FEATURE)
000176   5141     movf	0x41, 0, 0x1        	MOVF	(_SetupPacket + 1), W, B
000178   0a03     xorlw	0x3                	XORLW	0x03
00017a   e104     bnz	0x184                	BNZ	_00328_DS_
                                           ;	.line	582; usb.c	remoteWakeup = 1;
00017c   0e01     movlw	0x1                	MOVLW	0x01
00017e   0100     movlb	0                  	BANKSEL	_remoteWakeup
000180   6fcf     movwf	0xcf, 0x1          	MOVWF	_remoteWakeup, B
000182   d066     bra	0x250                	BRA	_00348_DS_
                                           _00328_DS_:
000184   0100     movlb	0                  	BANKSEL	_remoteWakeup
                                           ;	.line	584; usb.c	remoteWakeup = 0;
000186   6bcf     clrf	0xcf, 0x1           	CLRF	_remoteWakeup, B
000188   d063     bra	0x250                	BRA	_00348_DS_
                                           _00346_DS_:
                                           ;	.line	588; usb.c	else if (recipient == 0x02)
00018a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00018c   0a02     xorlw	0x2                	XORLW	0x02
00018e   e001     bz	0x192                 	BZ	_00365_DS_
000190   d05f     bra	0x250                	BRA	_00348_DS_
                                           _00365_DS_:
                                           ;	.line	591; usb.c	byte endpointNum = SetupPacket.wIndex0 & 0x0F;
000192   0e0f     movlw	0xf                	MOVLW	0x0f
000194   0105     movlb	0x5                	BANKSEL	(_SetupPacket + 4)
000196   1544     andwf	0x44, 0, 0x1       	ANDWF	(_SetupPacket + 4), W, B
000198   6e00     movwf	0, 0               	MOVWF	r0x00
                                           ;	.line	592; usb.c	byte endpointDir = SetupPacket.wIndex0 & 0x80;
00019a   0e80     movlw	0x80               	MOVLW	0x80
                                           ; removed redundant BANKSEL
00019c   1544     andwf	0x44, 0, 0x1       	ANDWF	(_SetupPacket + 4), W, B
00019e   6e02     movwf	0x2, 0             	MOVWF	r0x02
                                           ;	.line	593; usb.c	if ((feature == ENDPOINT_HALT) && (endpointNum != 0))
0001a0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0001a2   a4d8     btfss	0xd8, 0x2, 0       	BTFSS	STATUS, 2
0001a4   d055     bra	0x250                	BRA	_00348_DS_
0001a6   5000     movf	0, 0, 0             	MOVF	r0x00, W
0001a8   e101     bnz	0x1ac                	BNZ	_00369_DS_
0001aa   d052     bra	0x250                	BRA	_00348_DS_
                                           _00369_DS_:
                                           ;	.line	596; usb.c	requestHandled = 1;
0001ac   0e01     movlw	0x1                	MOVLW	0x01
0001ae   0100     movlb	0                  	BANKSEL	_requestHandled
0001b0   6fca     movwf	0xca, 0x1          	MOVWF	_requestHandled, B
                                           ; ;multiply lit val:0x08 by variable r0x00 and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
                                           ;	.line	599; usb.c	inPtr = (byte *)&ep0Bo + (endpointNum * 8);
0001b2   5000     movf	0, 0, 0             	MOVF	r0x00, W
0001b4   0d08     mullw	0x8                	MULLW	0x08
0001b6   cff3     movff	0xff3, 0           	MOVFF	PRODL, r0x00
0001b8   f000
0001ba   cff4     movff	0xff4, 0x1         	MOVFF	PRODH, r0x01
0001bc   f001
0001be   5000     movf	0, 0, 0             	MOVF	r0x00, W
0001c0   0100     movlb	0                  	BANKSEL	_inPtr
0001c2   6fc3     movwf	0xc3, 0x1          	MOVWF	_inPtr, B
0001c4   0e04     movlw	0x4                	MOVLW	0x04
0001c6   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
                                           ; removed redundant BANKSEL
0001c8   6fc4     movwf	0xc4, 0x1          	MOVWF	(_inPtr + 1), B
0001ca   0e80     movlw	0x80               	MOVLW	0x80
                                           ; removed redundant BANKSEL
0001cc   6bc5     clrf	0xc5, 0x1           	CLRF	(_inPtr + 2), B
0001ce   ae01     btfss	0x1, 0x7, 0        	BTFSS	r0x01, 7
0001d0   d001     bra	0x1d4                	BRA	_90636_DS_
                                           ; removed redundant BANKSEL
0001d2   69c5     setf	0xc5, 0x1           	SETF	(_inPtr + 2), B
                                           _90636_DS_:
0001d4   0100     movlb	0                  	BANKSEL	(_inPtr + 2)
0001d6   23c5     addwfc	0xc5, 0x1, 0x1    	ADDWFC	(_inPtr + 2), F, B
                                           ;	.line	600; usb.c	if (endpointDir)
0001d8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0001da   e005     bz	0x1e6                 	BZ	_00333_DS_
                                           ;	.line	601; usb.c	inPtr += 4;
0001dc   0e04     movlw	0x4                	MOVLW	0x04
                                           ; removed redundant BANKSEL
0001de   27c3     addwf	0xc3, 0x1, 0x1     	ADDWF	_inPtr, F, B
0001e0   0e00     movlw	0                  	MOVLW	0x00
                                           ; removed redundant BANKSEL
0001e2   23c4     addwfc	0xc4, 0x1, 0x1    	ADDWFC	(_inPtr + 1), F, B
                                           ; removed redundant BANKSEL
0001e4   23c5     addwfc	0xc5, 0x1, 0x1    	ADDWFC	(_inPtr + 2), F, B
                                           _00333_DS_:
0001e6   0105     movlb	0x5                	BANKSEL	(_SetupPacket + 1)
                                           ;	.line	603; usb.c	if(SetupPacket.bRequest == SET_FEATURE)
0001e8   5141     movf	0x41, 0, 0x1        	MOVF	(_SetupPacket + 1), W, B
0001ea   0a03     xorlw	0x3                	XORLW	0x03
0001ec   e110     bnz	0x20e                	BNZ	_00338_DS_
                                           ;	.line	604; usb.c	*inPtr = 0x84;
0001ee   c0c3     movff	0xc3, 0            	MOVFF	_inPtr, r0x00
0001f0   f000
0001f2   c0c4     movff	0xc4, 0x1          	MOVFF	(_inPtr + 1), r0x01
0001f4   f001
0001f6   c0c5     movff	0xc5, 0x3          	MOVFF	(_inPtr + 2), r0x03
0001f8   f003
0001fa   0e84     movlw	0x84               	MOVLW	0x84
0001fc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0001fe   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000200   ffe9
000202   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000204   fff3
000206   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000208   ec62     call	0x10c4, 0           	CALL	__gptrput1
00020a   f008
00020c   d021     bra	0x250                	BRA	_00348_DS_
                                           _00338_DS_:
                                           ;	.line	607; usb.c	if(endpointDir == 1)
00020e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000210   0a01     xorlw	0x1                	XORLW	0x01
000212   e10f     bnz	0x232                	BNZ	_00335_DS_
                                           ;	.line	608; usb.c	*inPtr = 0x00;
000214   c0c3     movff	0xc3, 0            	MOVFF	_inPtr, r0x00
000216   f000
000218   c0c4     movff	0xc4, 0x1          	MOVFF	(_inPtr + 1), r0x01
00021a   f001
00021c   c0c5     movff	0xc5, 0x2          	MOVFF	(_inPtr + 2), r0x02
00021e   f002
000220   6ae5     clrf	0xe5, 0             	CLRF	POSTDEC1
000222   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000224   ffe9
000226   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000228   fff3
00022a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00022c   ec62     call	0x10c4, 0           	CALL	__gptrput1
00022e   f008
000230   d00f     bra	0x250                	BRA	_00348_DS_
                                           _00335_DS_:
                                           ;	.line	610; usb.c	*inPtr = 0x88;
000232   c0c3     movff	0xc3, 0            	MOVFF	_inPtr, r0x00
000234   f000
000236   c0c4     movff	0xc4, 0x1          	MOVFF	(_inPtr + 1), r0x01
000238   f001
00023a   c0c5     movff	0xc5, 0x2          	MOVFF	(_inPtr + 2), r0x02
00023c   f002
00023e   0e88     movlw	0x88               	MOVLW	0x88
000240   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000242   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000244   ffe9
000246   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000248   fff3
00024a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00024c   ec62     call	0x10c4, 0           	CALL	__gptrput1
00024e   f008
                                           _00348_DS_:
000250   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000252   f003
000254   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000256   f002
000258   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00025a   f001
00025c   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00025e   f000
000260   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_usb__GetStatus	code
                                           _GetStatus:
                                           ;	.line	518; usb.c	static void GetStatus(void)
000374   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000376   ffe5
000378   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00037a   ffe5
00037c   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00037e   ffe5
                                           ;	.line	521; usb.c	byte recipient = SetupPacket.bmRequestType & 0x1F;
000380   0e1f     movlw	0x1f               	MOVLW	0x1f
000382   0105     movlb	0x5                	BANKSEL	_SetupPacket
000384   1540     andwf	0x40, 0, 0x1       	ANDWF	_SetupPacket, W, B
000386   6e00     movwf	0, 0               	MOVWF	r0x00
000388   0105     movlb	0x5                	BANKSEL	_controlTransferBuffer
                                           ;	.line	525; usb.c	controlTransferBuffer[0] = 0;
00038a   6b80     clrf	0x80, 0x1           	CLRF	_controlTransferBuffer, B
                                           ; removed redundant BANKSEL
                                           ;	.line	526; usb.c	controlTransferBuffer[1] = 0;
00038c   6b81     clrf	0x81, 0x1           	CLRF	(_controlTransferBuffer + 1), B
                                           ;	.line	529; usb.c	if (recipient == 0x00)
00038e   5000     movf	0, 0, 0             	MOVF	r0x00, W
000390   e113     bnz	0x3b8                	BNZ	_00304_DS_
                                           ;	.line	532; usb.c	requestHandled = 1;
000392   0e01     movlw	0x1                	MOVLW	0x01
000394   0100     movlb	0                  	BANKSEL	_requestHandled
000396   6fca     movwf	0xca, 0x1          	MOVWF	_requestHandled, B
000398   0100     movlb	0                  	BANKSEL	_selfPowered
                                           ;	.line	534; usb.c	if (selfPowered)
00039a   51ce     movf	0xce, 0, 0x1        	MOVF	_selfPowered, W, B
00039c   e004     bz	0x3a6                 	BZ	_00291_DS_
                                           ;	.line	535; usb.c	controlTransferBuffer[0] |= 0x01;
00039e   0e01     movlw	0x1                	MOVLW	0x01
0003a0   0105     movlb	0x5                	BANKSEL	_controlTransferBuffer
0003a2   1180     iorwf	0x80, 0, 0x1       	IORWF	_controlTransferBuffer, W, B
                                           ; #	MOVWF	r0x01
                                           ; #	MOVF	r0x01, W
                                           ; ;     peep 2 - Removed redundant move
0003a4   6f80     movwf	0x80, 0x1          	MOVWF	_controlTransferBuffer, B
                                           _00291_DS_:
0003a6   0100     movlb	0                  	BANKSEL	_remoteWakeup
                                           ;	.line	536; usb.c	if (remoteWakeup)
0003a8   51cf     movf	0xcf, 0, 0x1        	MOVF	_remoteWakeup, W, B
0003aa   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
0003ac   d047     bra	0x43c                	BRA	_00305_DS_
                                           ;	.line	537; usb.c	controlTransferBuffer[0] |= 0x02;
0003ae   0e02     movlw	0x2                	MOVLW	0x02
0003b0   0105     movlb	0x5                	BANKSEL	_controlTransferBuffer
0003b2   1180     iorwf	0x80, 0, 0x1       	IORWF	_controlTransferBuffer, W, B
                                           ; #	MOVWF	r0x01
                                           ; #	MOVF	r0x01, W
                                           ; ;     peep 2 - Removed redundant move
0003b4   6f80     movwf	0x80, 0x1          	MOVWF	_controlTransferBuffer, B
0003b6   d042     bra	0x43c                	BRA	_00305_DS_
                                           _00304_DS_:
                                           ;	.line	539; usb.c	else if (recipient == 0x01)
0003b8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0003ba   0a01     xorlw	0x1                	XORLW	0x01
0003bc   e104     bnz	0x3c6                	BNZ	_00301_DS_
                                           ;	.line	542; usb.c	requestHandled = 1;
0003be   0e01     movlw	0x1                	MOVLW	0x01
0003c0   0100     movlb	0                  	BANKSEL	_requestHandled
0003c2   6fca     movwf	0xca, 0x1          	MOVWF	_requestHandled, B
0003c4   d03b     bra	0x43c                	BRA	_00305_DS_
                                           _00301_DS_:
                                           ;	.line	544; usb.c	else if (recipient == 0x02)
0003c6   5000     movf	0, 0, 0             	MOVF	r0x00, W
0003c8   0a02     xorlw	0x2                	XORLW	0x02
0003ca   e001     bz	0x3ce                 	BZ	_00322_DS_
0003cc   d037     bra	0x43c                	BRA	_00305_DS_
                                           _00322_DS_:
                                           ;	.line	547; usb.c	byte endpointNum = SetupPacket.wIndex0 & 0x0F;
0003ce   0e0f     movlw	0xf                	MOVLW	0x0f
0003d0   0105     movlb	0x5                	BANKSEL	(_SetupPacket + 4)
0003d2   1544     andwf	0x44, 0, 0x1       	ANDWF	(_SetupPacket + 4), W, B
0003d4   6e00     movwf	0, 0               	MOVWF	r0x00
                                           ;	.line	548; usb.c	byte endpointDir = SetupPacket.wIndex0 & 0x80;
0003d6   0e80     movlw	0x80               	MOVLW	0x80
                                           ; removed redundant BANKSEL
0003d8   1544     andwf	0x44, 0, 0x1       	ANDWF	(_SetupPacket + 4), W, B
0003da   6e01     movwf	0x1, 0             	MOVWF	r0x01
                                           ;	.line	549; usb.c	requestHandled = 1;
0003dc   0e01     movlw	0x1                	MOVLW	0x01
0003de   0100     movlb	0                  	BANKSEL	_requestHandled
0003e0   6fca     movwf	0xca, 0x1          	MOVWF	_requestHandled, B
                                           ; ;multiply lit val:0x08 by variable r0x00 and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
                                           ;	.line	552; usb.c	inPtr = (byte *)&ep0Bo + (endpointNum * 8);
0003e2   5000     movf	0, 0, 0             	MOVF	r0x00, W
0003e4   0d08     mullw	0x8                	MULLW	0x08
0003e6   cff3     movff	0xff3, 0           	MOVFF	PRODL, r0x00
0003e8   f000
0003ea   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
0003ec   f002
0003ee   5000     movf	0, 0, 0             	MOVF	r0x00, W
0003f0   0100     movlb	0                  	BANKSEL	_inPtr
0003f2   6fc3     movwf	0xc3, 0x1          	MOVWF	_inPtr, B
0003f4   0e04     movlw	0x4                	MOVLW	0x04
0003f6   2402     addwf	0x2, 0, 0          	ADDWF	r0x02, W
                                           ; removed redundant BANKSEL
0003f8   6fc4     movwf	0xc4, 0x1          	MOVWF	(_inPtr + 1), B
0003fa   0e80     movlw	0x80               	MOVLW	0x80
                                           ; removed redundant BANKSEL
0003fc   6bc5     clrf	0xc5, 0x1           	CLRF	(_inPtr + 2), B
0003fe   ae02     btfss	0x2, 0x7, 0        	BTFSS	r0x02, 7
000400   d001     bra	0x404                	BRA	_100637_DS_
                                           ; removed redundant BANKSEL
000402   69c5     setf	0xc5, 0x1           	SETF	(_inPtr + 2), B
                                           _100637_DS_:
000404   0100     movlb	0                  	BANKSEL	(_inPtr + 2)
000406   23c5     addwfc	0xc5, 0x1, 0x1    	ADDWFC	(_inPtr + 2), F, B
                                           ;	.line	553; usb.c	if (endpointDir)
000408   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00040a   e005     bz	0x416                 	BZ	_00295_DS_
                                           ;	.line	554; usb.c	inPtr += 4;
00040c   0e04     movlw	0x4                	MOVLW	0x04
                                           ; removed redundant BANKSEL
00040e   27c3     addwf	0xc3, 0x1, 0x1     	ADDWF	_inPtr, F, B
000410   0e00     movlw	0                  	MOVLW	0x00
                                           ; removed redundant BANKSEL
000412   23c4     addwfc	0xc4, 0x1, 0x1    	ADDWFC	(_inPtr + 1), F, B
                                           ; removed redundant BANKSEL
000414   23c5     addwfc	0xc5, 0x1, 0x1    	ADDWFC	(_inPtr + 2), F, B
                                           _00295_DS_:
                                           ;	.line	555; usb.c	if(*inPtr & BSTALL)
000416   c0c3     movff	0xc3, 0            	MOVFF	_inPtr, r0x00
000418   f000
00041a   c0c4     movff	0xc4, 0x1          	MOVFF	(_inPtr + 1), r0x01
00041c   f001
00041e   c0c5     movff	0xc5, 0x2          	MOVFF	(_inPtr + 2), r0x02
000420   f002
000422   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000424   ffe9
000426   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000428   fff3
00042a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00042c   ec26     call	0x104c, 0           	CALL	__gptrget1
00042e   f008
000430   6e00     movwf	0, 0               	MOVWF	r0x00
000432   a400     btfss	0, 0x2, 0          	BTFSS	r0x00, 2
000434   d003     bra	0x43c                	BRA	_00305_DS_
                                           ;	.line	556; usb.c	controlTransferBuffer[0] = 0x01;
000436   0e01     movlw	0x1                	MOVLW	0x01
000438   0105     movlb	0x5                	BANKSEL	_controlTransferBuffer
00043a   6f80     movwf	0x80, 0x1          	MOVWF	_controlTransferBuffer, B
                                           _00305_DS_:
00043c   0100     movlb	0                  	BANKSEL	_requestHandled
                                           ;	.line	559; usb.c	if (requestHandled)
00043e   51ca     movf	0xca, 0, 0x1        	MOVF	_requestHandled, W, B
000440   e00b     bz	0x458                 	BZ	_00308_DS_
                                           ;	.line	561; usb.c	outPtr = (byte *)&controlTransferBuffer;
000442   0e05     movlw	0x5                	MOVLW	HIGH(_controlTransferBuffer)
000444   0100     movlb	0                  	BANKSEL	(_outPtr + 1)
000446   6fc1     movwf	0xc1, 0x1          	MOVWF	(_outPtr + 1), B
000448   0e80     movlw	0x80               	MOVLW	LOW(_controlTransferBuffer)
                                           ; removed redundant BANKSEL
00044a   6fc0     movwf	0xc0, 0x1          	MOVWF	_outPtr, B
00044c   0e80     movlw	0x80               	MOVLW	0x80
                                           ; removed redundant BANKSEL
00044e   6fc2     movwf	0xc2, 0x1          	MOVWF	(_outPtr + 2), B
                                           ;	.line	562; usb.c	wCount = 2;
000450   0e02     movlw	0x2                	MOVLW	0x02
000452   0100     movlb	0                  	BANKSEL	_wCount
000454   6fc6     movwf	0xc6, 0x1          	MOVWF	_wCount, B
                                           ; removed redundant BANKSEL
000456   6bc7     clrf	0xc7, 0x1           	CLRF	(_wCount + 1), B
                                           _00308_DS_:
000458   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00045a   f002
00045c   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00045e   f001
000460   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000462   f000
000464   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_usb__GetDescriptor	code
                                           _GetDescriptor:
                                           ;	.line	452; usb.c	static void GetDescriptor(void)
000644   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000646   ffe5
000648   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00064a   ffe5
00064c   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00064e   ffe5
000650   0105     movlb	0x5                	BANKSEL	_SetupPacket
                                           ;	.line	457; usb.c	if(SetupPacket.bmRequestType == 0x80)
000652   5140     movf	0x40, 0, 0x1        	MOVF	_SetupPacket, W, B
000654   0a80     xorlw	0x80               	XORLW	0x80
000656   e001     bz	0x65a                 	BZ	_00277_DS_
000658   d065     bra	0x724                	BRA	_00268_DS_
                                           _00277_DS_:
                                           ;	.line	459; usb.c	byte descriptorType  = SetupPacket.wValue1;
00065a   c543     movff	0x543, 0           	MOVFF	(_SetupPacket + 3), r0x00
00065c   f000
                                           ;	.line	460; usb.c	byte descriptorIndex = SetupPacket.wValue0;
00065e   c542     movff	0x542, 0x1         	MOVFF	(_SetupPacket + 2), r0x01
000660   f001
                                           ;	.line	462; usb.c	if (descriptorType == DEVICE_DESCRIPTOR)
000662   5000     movf	0, 0, 0             	MOVF	r0x00, W
000664   0a01     xorlw	0x1                	XORLW	0x01
000666   e10f     bnz	0x686                	BNZ	_00264_DS_
                                           ;	.line	467; usb.c	requestHandled = 1;
000668   0e01     movlw	0x1                	MOVLW	0x01
00066a   0100     movlb	0                  	BANKSEL	_requestHandled
00066c   6fca     movwf	0xca, 0x1          	MOVWF	_requestHandled, B
                                           ;	.line	468; usb.c	outPtr = (byte *)&deviceDescriptor;
00066e   0e0c     movlw	0xc                	MOVLW	LOW(_deviceDescriptor)
000670   0100     movlb	0                  	BANKSEL	_outPtr
000672   6fc0     movwf	0xc0, 0x1          	MOVWF	_outPtr, B
000674   0e0c     movlw	0xc                	MOVLW	HIGH(_deviceDescriptor)
                                           ; removed redundant BANKSEL
000676   6fc1     movwf	0xc1, 0x1          	MOVWF	(_outPtr + 1), B
000678   0e00     movlw	0                  	MOVLW	UPPER(_deviceDescriptor)
                                           ; removed redundant BANKSEL
00067a   6fc2     movwf	0xc2, 0x1          	MOVWF	(_outPtr + 2), B
                                           ;	.line	469; usb.c	wCount = DEVICE_DESCRIPTOR_SIZE;
00067c   0e12     movlw	0x12               	MOVLW	0x12
00067e   0100     movlb	0                  	BANKSEL	_wCount
000680   6fc6     movwf	0xc6, 0x1          	MOVWF	_wCount, B
                                           ; removed redundant BANKSEL
000682   6bc7     clrf	0xc7, 0x1           	CLRF	(_wCount + 1), B
000684   d04f     bra	0x724                	BRA	_00268_DS_
                                           _00264_DS_:
                                           ;	.line	471; usb.c	else if (descriptorType == CONFIGURATION_DESCRIPTOR)
000686   5000     movf	0, 0, 0             	MOVF	r0x00, W
000688   0a02     xorlw	0x2                	XORLW	0x02
00068a   e118     bnz	0x6bc                	BNZ	_00261_DS_
                                           ;	.line	476; usb.c	requestHandled = 1;
00068c   0e01     movlw	0x1                	MOVLW	0x01
00068e   0100     movlb	0                  	BANKSEL	_requestHandled
000690   6fca     movwf	0xca, 0x1          	MOVWF	_requestHandled, B
                                           ;	.line	487; usb.c	outPtr = (byte *)&configDescriptor;
000692   0e1e     movlw	0x1e               	MOVLW	LOW(_configDescriptor)
000694   0100     movlb	0                  	BANKSEL	_outPtr
000696   6fc0     movwf	0xc0, 0x1          	MOVWF	_outPtr, B
000698   0e0c     movlw	0xc                	MOVLW	HIGH(_configDescriptor)
                                           ; removed redundant BANKSEL
00069a   6fc1     movwf	0xc1, 0x1          	MOVWF	(_outPtr + 1), B
00069c   0e00     movlw	0                  	MOVLW	UPPER(_configDescriptor)
                                           ; removed redundant BANKSEL
00069e   6fc2     movwf	0xc2, 0x1          	MOVWF	(_outPtr + 2), B
                                           ;	.line	488; usb.c	wCount = configDescriptor.configHeader[2]; // Note: SDCC makes bad code with this
0006a0   0e20     movlw	0x20               	MOVLW	LOW(_configDescriptor + 2)
0006a2   6ef6     movwf	0xf6, 0            	MOVWF	TBLPTRL
0006a4   0e0c     movlw	0xc                	MOVLW	HIGH(_configDescriptor + 2)
0006a6   6ef7     movwf	0xf7, 0            	MOVWF	TBLPTRH
0006a8   0e00     movlw	0                  	MOVLW	UPPER(_configDescriptor + 2)
0006aa   6ef8     movwf	0xf8, 0            	MOVWF	TBLPTRU
0006ac   0009     tblrd	*+                 	TBLRD*+	
0006ae   cff5     movff	0xff5, 0x2         	MOVFF	TABLAT, r0x02
0006b0   f002
0006b2   c002     movff	0x2, 0xc6          	MOVFF	r0x02, _wCount
0006b4   f0c6
0006b6   0100     movlb	0                  	BANKSEL	(_wCount + 1)
0006b8   6bc7     clrf	0xc7, 0x1           	CLRF	(_wCount + 1), B
0006ba   d034     bra	0x724                	BRA	_00268_DS_
                                           _00261_DS_:
                                           ;	.line	494; usb.c	else if (descriptorType == STRING_DESCRIPTOR)
0006bc   5000     movf	0, 0, 0             	MOVF	r0x00, W
0006be   0a03     xorlw	0x3                	XORLW	0x03
0006c0   e131     bnz	0x724                	BNZ	_00268_DS_
                                           ;	.line	499; usb.c	requestHandled = 1;
0006c2   0e01     movlw	0x1                	MOVLW	0x01
0006c4   0100     movlb	0                  	BANKSEL	_requestHandled
0006c6   6fca     movwf	0xca, 0x1          	MOVWF	_requestHandled, B
                                           ;	.line	500; usb.c	if (descriptorIndex == 0)
0006c8   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0006ca   e108     bnz	0x6dc                	BNZ	_00256_DS_
                                           ;	.line	501; usb.c	outPtr = &stringDescriptor0;
0006cc   0e78     movlw	0x78               	MOVLW	LOW(_stringDescriptor0)
0006ce   0100     movlb	0                  	BANKSEL	_outPtr
0006d0   6fc0     movwf	0xc0, 0x1          	MOVWF	_outPtr, B
0006d2   0e0c     movlw	0xc                	MOVLW	HIGH(_stringDescriptor0)
                                           ; removed redundant BANKSEL
0006d4   6fc1     movwf	0xc1, 0x1          	MOVWF	(_outPtr + 1), B
0006d6   0e00     movlw	0                  	MOVLW	UPPER(_stringDescriptor0)
                                           ; removed redundant BANKSEL
0006d8   6fc2     movwf	0xc2, 0x1          	MOVWF	(_outPtr + 2), B
0006da   d012     bra	0x700                	BRA	_00257_DS_
                                           _00256_DS_:
                                           ;	.line	502; usb.c	else if (descriptorIndex == 1)
0006dc   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0006de   0a01     xorlw	0x1                	XORLW	0x01
0006e0   e108     bnz	0x6f2                	BNZ	_00253_DS_
                                           ;	.line	503; usb.c	outPtr = &stringDescriptor1;
0006e2   0e7c     movlw	0x7c               	MOVLW	LOW(_stringDescriptor1)
0006e4   0100     movlb	0                  	BANKSEL	_outPtr
0006e6   6fc0     movwf	0xc0, 0x1          	MOVWF	_outPtr, B
0006e8   0e0c     movlw	0xc                	MOVLW	HIGH(_stringDescriptor1)
                                           ; removed redundant BANKSEL
0006ea   6fc1     movwf	0xc1, 0x1          	MOVWF	(_outPtr + 1), B
0006ec   0e00     movlw	0                  	MOVLW	UPPER(_stringDescriptor1)
                                           ; removed redundant BANKSEL
0006ee   6fc2     movwf	0xc2, 0x1          	MOVWF	(_outPtr + 2), B
0006f0   d007     bra	0x700                	BRA	_00257_DS_
                                           _00253_DS_:
                                           ;	.line	505; usb.c	outPtr = &stringDescriptor2;
0006f2   0e8a     movlw	0x8a               	MOVLW	LOW(_stringDescriptor2)
0006f4   0100     movlb	0                  	BANKSEL	_outPtr
0006f6   6fc0     movwf	0xc0, 0x1          	MOVWF	_outPtr, B
0006f8   0e0c     movlw	0xc                	MOVLW	HIGH(_stringDescriptor2)
                                           ; removed redundant BANKSEL
0006fa   6fc1     movwf	0xc1, 0x1          	MOVWF	(_outPtr + 1), B
0006fc   0e00     movlw	0                  	MOVLW	UPPER(_stringDescriptor2)
                                           ; removed redundant BANKSEL
0006fe   6fc2     movwf	0xc2, 0x1          	MOVWF	(_outPtr + 2), B
                                           _00257_DS_:
                                           ;	.line	506; usb.c	wCount = *outPtr;
000700   c0c0     movff	0xc0, 0            	MOVFF	_outPtr, r0x00
000702   f000
000704   c0c1     movff	0xc1, 0x1          	MOVFF	(_outPtr + 1), r0x01
000706   f001
000708   c0c2     movff	0xc2, 0x2          	MOVFF	(_outPtr + 2), r0x02
00070a   f002
00070c   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00070e   ffe9
000710   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000712   fff3
000714   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000716   ec26     call	0x104c, 0           	CALL	__gptrget1
000718   f008
00071a   6e00     movwf	0, 0               	MOVWF	r0x00
00071c   c000     movff	0, 0xc6            	MOVFF	r0x00, _wCount
00071e   f0c6
000720   0100     movlb	0                  	BANKSEL	(_wCount + 1)
000722   6bc7     clrf	0xc7, 0x1           	CLRF	(_wCount + 1), B
                                           _00268_DS_:
000724   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000726   f002
000728   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00072a   f001
00072c   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00072e   f000
000730   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_usb__ProcessHIDRequest	code
                                           _ProcessHIDRequest:
                                           ;	.line	332; usb.c	void ProcessHIDRequest(void)
000262   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000264   ffe5
000266   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000268   ffe5
                                           ;	.line	337; usb.c	if((SetupPacket.bmRequestType & 0x1F) != 0x01 || (SetupPacket.wIndex0 != 0x00))
00026a   0e1f     movlw	0x1f               	MOVLW	0x1f
00026c   0105     movlb	0x5                	BANKSEL	_SetupPacket
00026e   1540     andwf	0x40, 0, 0x1       	ANDWF	_SetupPacket, W, B
                                           ; #	MOVWF	r0x00
                                           ; #	MOVF	r0x00, W
                                           ; ;     peep 2 - Removed redundant move
000270   0a01     xorlw	0x1                	XORLW	0x01
000272   e103     bnz	0x27a                	BNZ	_00179_DS_
                                           _00224_DS_:
000274   0105     movlb	0x5                	BANKSEL	(_SetupPacket + 4)
000276   5144     movf	0x44, 0, 0x1        	MOVF	(_SetupPacket + 4), W, B
000278   e001     bz	0x27c                 	BZ	_00180_DS_
                                           _00179_DS_:
                                           ;	.line	338; usb.c	return;
00027a   d077     bra	0x36a                	BRA	_00209_DS_
                                           _00180_DS_:
                                           ;	.line	340; usb.c	bRequest = SetupPacket.bRequest;
00027c   c541     movff	0x541, 0           	MOVFF	(_SetupPacket + 1), r0x00
00027e   f000
                                           ;	.line	342; usb.c	if (bRequest == GET_DESCRIPTOR)
000280   5000     movf	0, 0, 0             	MOVF	r0x00, W
000282   0a06     xorlw	0x6                	XORLW	0x06
000284   e128     bnz	0x2d6                	BNZ	_00189_DS_
                                           ;	.line	345; usb.c	byte descriptorType  = SetupPacket.wValue1;
000286   c543     movff	0x543, 0x1         	MOVFF	(_SetupPacket + 3), r0x01
000288   f001
                                           ;	.line	346; usb.c	if (descriptorType == HID_DESCRIPTOR)
00028a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00028c   0a21     xorlw	0x21               	XORLW	0x21
00028e   e112     bnz	0x2b4                	BNZ	_00186_DS_
                                           ;	.line	352; usb.c	requestHandled = 1;
000290   0e01     movlw	0x1                	MOVLW	0x01
000292   0100     movlb	0                  	BANKSEL	_requestHandled
000294   6fca     movwf	0xca, 0x1          	MOVWF	_requestHandled, B
                                           ;	.line	353; usb.c	outPtr = &configDescriptor.HIDDescriptor;
000296   0e09     movlw	0x9                	MOVLW	0x09
000298   241e     addwf	0x1e, 0, 0         	ADDWF	LOW(_configDescriptor), W
00029a   0100     movlb	0                  	BANKSEL	_outPtr
00029c   6fc0     movwf	0xc0, 0x1          	MOVWF	_outPtr, B
00029e   0e00     movlw	0                  	MOVLW	0x00
0002a0   200c     addwfc	0xc, 0, 0         	ADDWFC	HIGH(_configDescriptor), W
                                           ; removed redundant BANKSEL
0002a2   6fc1     movwf	0xc1, 0x1          	MOVWF	(_outPtr + 1), B
0002a4   0e00     movlw	0                  	MOVLW	0x00
0002a6   2000     addwfc	0, 0, 0           	ADDWFC	UPPER(_configDescriptor), W
                                           ; removed redundant BANKSEL
0002a8   6fc2     movwf	0xc2, 0x1          	MOVWF	(_outPtr + 2), B
                                           ;	.line	354; usb.c	wCount = HID_HEADER_SIZE;
0002aa   0e09     movlw	0x9                	MOVLW	0x09
0002ac   0100     movlb	0                  	BANKSEL	_wCount
0002ae   6fc6     movwf	0xc6, 0x1          	MOVWF	_wCount, B
                                           ; removed redundant BANKSEL
0002b0   6bc7     clrf	0xc7, 0x1           	CLRF	(_wCount + 1), B
0002b2   d011     bra	0x2d6                	BRA	_00189_DS_
                                           _00186_DS_:
                                           ;	.line	356; usb.c	else if (descriptorType == REPORT_DESCRIPTOR)
0002b4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0002b6   0a22     xorlw	0x22               	XORLW	0x22
0002b8   e10e     bnz	0x2d6                	BNZ	_00189_DS_
                                           ;	.line	362; usb.c	requestHandled = 1;
0002ba   0e01     movlw	0x1                	MOVLW	0x01
0002bc   0100     movlb	0                  	BANKSEL	_requestHandled
0002be   6fca     movwf	0xca, 0x1          	MOVWF	_requestHandled, B
                                           ;	.line	363; usb.c	outPtr = (code byte *)HIDReport;
0002c0   0e48     movlw	0x48               	MOVLW	LOW(_HIDReport)
0002c2   0100     movlb	0                  	BANKSEL	_outPtr
0002c4   6fc0     movwf	0xc0, 0x1          	MOVWF	_outPtr, B
0002c6   0e0c     movlw	0xc                	MOVLW	HIGH(_HIDReport)
                                           ; removed redundant BANKSEL
0002c8   6fc1     movwf	0xc1, 0x1          	MOVWF	(_outPtr + 1), B
0002ca   0e00     movlw	0                  	MOVLW	UPPER(_HIDReport)
                                           ; removed redundant BANKSEL
0002cc   6fc2     movwf	0xc2, 0x1          	MOVWF	(_outPtr + 2), B
                                           ;	.line	364; usb.c	wCount = HID_REPORT_SIZE;
0002ce   0e2f     movlw	0x2f               	MOVLW	0x2f
0002d0   0100     movlb	0                  	BANKSEL	_wCount
0002d2   6fc6     movwf	0xc6, 0x1          	MOVWF	_wCount, B
                                           ; removed redundant BANKSEL
0002d4   6bc7     clrf	0xc7, 0x1           	CLRF	(_wCount + 1), B
                                           _00189_DS_:
                                           ;	.line	381; usb.c	if ((SetupPacket.bmRequestType & 0x60) != 0x20)
0002d6   0e60     movlw	0x60               	MOVLW	0x60
0002d8   0105     movlb	0x5                	BANKSEL	_SetupPacket
0002da   1540     andwf	0x40, 0, 0x1       	ANDWF	_SetupPacket, W, B
                                           ; #	MOVWF	r0x01
                                           ; #	MOVF	r0x01, W
                                           ; ;     peep 2 - Removed redundant move
0002dc   0a20     xorlw	0x20               	XORLW	0x20
0002de   e001     bz	0x2e2                 	BZ	_00191_DS_
                                           ;	.line	386; usb.c	return;
0002e0   d044     bra	0x36a                	BRA	_00209_DS_
                                           _00191_DS_:
                                           ;	.line	390; usb.c	if (bRequest == GET_REPORT)
0002e2   5000     movf	0, 0, 0             	MOVF	r0x00, W
0002e4   0a01     xorlw	0x1                	XORLW	0x01
0002e6   e103     bnz	0x2ee                	BNZ	_00207_DS_
                                           ;	.line	395; usb.c	HIDGetReport();
0002e8   ec30     call	0xe60, 0            	CALL	_HIDGetReport
0002ea   f007
0002ec   d03e     bra	0x36a                	BRA	_00209_DS_
                                           _00207_DS_:
                                           ;	.line	397; usb.c	else if (bRequest == SET_REPORT)
0002ee   5000     movf	0, 0, 0             	MOVF	r0x00, W
0002f0   0a09     xorlw	0x9                	XORLW	0x09
0002f2   e106     bnz	0x300                	BNZ	_00204_DS_
                                           ;	.line	402; usb.c	HIDPostProcess = 1;
0002f4   0e01     movlw	0x1                	MOVLW	0x01
0002f6   0100     movlb	0                  	BANKSEL	_HIDPostProcess
0002f8   6fcb     movwf	0xcb, 0x1          	MOVWF	_HIDPostProcess, B
                                           ;	.line	403; usb.c	HIDSetReport();            
0002fa   ec12     call	0xe24, 0            	CALL	_HIDSetReport
0002fc   f007
0002fe   d035     bra	0x36a                	BRA	_00209_DS_
                                           _00204_DS_:
                                           ;	.line	405; usb.c	else if (bRequest == GET_IDLE)
000300   5000     movf	0, 0, 0             	MOVF	r0x00, W
000302   0a02     xorlw	0x2                	XORLW	0x02
000304   e10f     bnz	0x324                	BNZ	_00201_DS_
                                           ;	.line	410; usb.c	requestHandled = 1;
000306   0e01     movlw	0x1                	MOVLW	0x01
000308   0100     movlb	0                  	BANKSEL	_requestHandled
00030a   6fca     movwf	0xca, 0x1          	MOVWF	_requestHandled, B
                                           ;	.line	411; usb.c	outPtr = &hidIdleRate;
00030c   0e00     movlw	0                  	MOVLW	HIGH(_hidIdleRate)
00030e   0100     movlb	0                  	BANKSEL	(_outPtr + 1)
000310   6fc1     movwf	0xc1, 0x1          	MOVWF	(_outPtr + 1), B
000312   0ecc     movlw	0xcc               	MOVLW	LOW(_hidIdleRate)
                                           ; removed redundant BANKSEL
000314   6fc0     movwf	0xc0, 0x1          	MOVWF	_outPtr, B
000316   0e80     movlw	0x80               	MOVLW	0x80
                                           ; removed redundant BANKSEL
000318   6fc2     movwf	0xc2, 0x1          	MOVWF	(_outPtr + 2), B
                                           ;	.line	412; usb.c	wCount = 1;
00031a   0e01     movlw	0x1                	MOVLW	0x01
00031c   0100     movlb	0                  	BANKSEL	_wCount
00031e   6fc6     movwf	0xc6, 0x1          	MOVWF	_wCount, B
                                           ; removed redundant BANKSEL
000320   6bc7     clrf	0xc7, 0x1           	CLRF	(_wCount + 1), B
000322   d023     bra	0x36a                	BRA	_00209_DS_
                                           _00201_DS_:
                                           ;	.line	414; usb.c	else if (bRequest == SET_IDLE)
000324   5000     movf	0, 0, 0             	MOVF	r0x00, W
000326   0a0a     xorlw	0xa                	XORLW	0x0a
000328   e106     bnz	0x336                	BNZ	_00198_DS_
                                           ;	.line	419; usb.c	requestHandled = 1;
00032a   0e01     movlw	0x1                	MOVLW	0x01
00032c   0100     movlb	0                  	BANKSEL	_requestHandled
00032e   6fca     movwf	0xca, 0x1          	MOVWF	_requestHandled, B
                                           ;	.line	420; usb.c	hidIdleRate = SetupPacket.wValue1;
000330   c543     movff	0x543, 0xcc        	MOVFF	(_SetupPacket + 3), _hidIdleRate
000332   f0cc
000334   d01a     bra	0x36a                	BRA	_00209_DS_
                                           _00198_DS_:
                                           ;	.line	422; usb.c	else if (bRequest == GET_PROTOCOL)
000336   5000     movf	0, 0, 0             	MOVF	r0x00, W
000338   0a03     xorlw	0x3                	XORLW	0x03
00033a   e10f     bnz	0x35a                	BNZ	_00195_DS_
                                           ;	.line	427; usb.c	requestHandled = 1;
00033c   0e01     movlw	0x1                	MOVLW	0x01
00033e   0100     movlb	0                  	BANKSEL	_requestHandled
000340   6fca     movwf	0xca, 0x1          	MOVWF	_requestHandled, B
                                           ;	.line	428; usb.c	outPtr = &hidProtocol;
000342   0e00     movlw	0                  	MOVLW	HIGH(_hidProtocol)
000344   0100     movlb	0                  	BANKSEL	(_outPtr + 1)
000346   6fc1     movwf	0xc1, 0x1          	MOVWF	(_outPtr + 1), B
000348   0ecd     movlw	0xcd               	MOVLW	LOW(_hidProtocol)
                                           ; removed redundant BANKSEL
00034a   6fc0     movwf	0xc0, 0x1          	MOVWF	_outPtr, B
00034c   0e80     movlw	0x80               	MOVLW	0x80
                                           ; removed redundant BANKSEL
00034e   6fc2     movwf	0xc2, 0x1          	MOVWF	(_outPtr + 2), B
                                           ;	.line	429; usb.c	wCount = 1;
000350   0e01     movlw	0x1                	MOVLW	0x01
000352   0100     movlb	0                  	BANKSEL	_wCount
000354   6fc6     movwf	0xc6, 0x1          	MOVWF	_wCount, B
                                           ; removed redundant BANKSEL
000356   6bc7     clrf	0xc7, 0x1           	CLRF	(_wCount + 1), B
000358   d008     bra	0x36a                	BRA	_00209_DS_
                                           _00195_DS_:
                                           ;	.line	431; usb.c	else if (bRequest == SET_PROTOCOL)
00035a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00035c   0a0b     xorlw	0xb                	XORLW	0x0b
00035e   e105     bnz	0x36a                	BNZ	_00209_DS_
                                           ;	.line	436; usb.c	requestHandled = 1;
000360   0e01     movlw	0x1                	MOVLW	0x01
000362   0100     movlb	0                  	BANKSEL	_requestHandled
000364   6fca     movwf	0xca, 0x1          	MOVWF	_requestHandled, B
                                           ;	.line	437; usb.c	hidProtocol = SetupPacket.wValue0;
000366   c542     movff	0x542, 0xcd        	MOVFF	(_SetupPacket + 2), _hidProtocol
000368   f0cd
                                           _00209_DS_:
00036a   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00036c   f001
00036e   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000370   f000
000372   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_usb__HIDSetReport	code
                                           _HIDSetReport:
                                           ;	.line	317; usb.c	void HIDSetReport(void)
000e24   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000e26   ffe5
                                           ;	.line	319; usb.c	byte reportID = SetupPacket.wValue0;
000e28   c542     movff	0x542, 0           	MOVFF	(_SetupPacket + 2), r0x00
000e2a   f000
000e2c   0105     movlb	0x5                	BANKSEL	(_SetupPacket + 3)
                                           ;	.line	325; usb.c	if (SetupPacket.wValue1 == 0x02)
000e2e   5143     movf	0x43, 0, 0x1        	MOVF	(_SetupPacket + 3), W, B
000e30   0a02     xorlw	0x2                	XORLW	0x02
000e32   e108     bnz	0xe44                	BNZ	_00165_DS_
                                           ;	.line	326; usb.c	requestHandled = SetupOutputReport(reportID);
000e34   5000     movf	0, 0, 0             	MOVF	r0x00, W
000e36   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e38   ecce     call	0xf9c, 0            	CALL	_SetupOutputReport
000e3a   f007
000e3c   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000e3e   0100     movlb	0                  	BANKSEL	_requestHandled
000e40   6fca     movwf	0xca, 0x1          	MOVWF	_requestHandled, B
000e42   d00b     bra	0xe5a                	BRA	_00167_DS_
                                           _00165_DS_:
000e44   0105     movlb	0x5                	BANKSEL	(_SetupPacket + 3)
                                           ;	.line	327; usb.c	else if (SetupPacket.wValue1 == 0x03)
000e46   5143     movf	0x43, 0, 0x1        	MOVF	(_SetupPacket + 3), W, B
000e48   0a03     xorlw	0x3                	XORLW	0x03
000e4a   e107     bnz	0xe5a                	BNZ	_00167_DS_
                                           ;	.line	328; usb.c	requestHandled = SetupFeatureReport(reportID);
000e4c   5000     movf	0, 0, 0             	MOVF	r0x00, W
000e4e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e50   ece5     call	0xfca, 0            	CALL	_SetupFeatureReport
000e52   f007
000e54   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000e56   0100     movlb	0                  	BANKSEL	_requestHandled
000e58   6fca     movwf	0xca, 0x1          	MOVWF	_requestHandled, B
                                           _00167_DS_:
000e5a   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000e5c   f000
000e5e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_usb__HIDGetReport	code
                                           _HIDGetReport:
                                           ;	.line	302; usb.c	void HIDGetReport(void)
000e60   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000e62   ffe5
                                           ;	.line	304; usb.c	byte reportID = SetupPacket.wValue0;
000e64   c542     movff	0x542, 0           	MOVFF	(_SetupPacket + 2), r0x00
000e66   f000
000e68   0105     movlb	0x5                	BANKSEL	(_SetupPacket + 3)
                                           ;	.line	310; usb.c	if (SetupPacket.wValue1 == 0x01)
000e6a   5143     movf	0x43, 0, 0x1        	MOVF	(_SetupPacket + 3), W, B
000e6c   0a01     xorlw	0x1                	XORLW	0x01
000e6e   e108     bnz	0xe80                	BNZ	_00148_DS_
                                           ;	.line	311; usb.c	requestHandled = GetInputReport(reportID);
000e70   5000     movf	0, 0, 0             	MOVF	r0x00, W
000e72   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e74   ec4e     call	0xe9c, 0            	CALL	_GetInputReport
000e76   f007
000e78   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000e7a   0100     movlb	0                  	BANKSEL	_requestHandled
000e7c   6fca     movwf	0xca, 0x1          	MOVWF	_requestHandled, B
000e7e   d00b     bra	0xe96                	BRA	_00150_DS_
                                           _00148_DS_:
000e80   0105     movlb	0x5                	BANKSEL	(_SetupPacket + 3)
                                           ;	.line	312; usb.c	else if (SetupPacket.wValue1 == 0x03)
000e82   5143     movf	0x43, 0, 0x1        	MOVF	(_SetupPacket + 3), W, B
000e84   0a03     xorlw	0x3                	XORLW	0x03
000e86   e107     bnz	0xe96                	BNZ	_00150_DS_
                                           ;	.line	313; usb.c	requestHandled = GetFeatureReport(reportID);
000e88   5000     movf	0, 0, 0             	MOVF	r0x00, W
000e8a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e8c   ecf4     call	0xde8, 0            	CALL	_GetFeatureReport
000e8e   f006
000e90   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000e92   0100     movlb	0                  	BANKSEL	_requestHandled
000e94   6fca     movwf	0xca, 0x1          	MOVWF	_requestHandled, B
                                           _00150_DS_:
000e96   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000e98   f000
000e9a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_usb__HIDInitEndpoint	code
                                           _HIDInitEndpoint:
                                           ;	.line	281; usb.c	void HIDInitEndpoint(void)
000d16   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000d18   ffe5
000d1a   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000d1c   ffe5
000d1e   0100     movlb	0                  	BANKSEL	_hidRxLen
                                           ;	.line	283; usb.c	hidRxLen =0;
000d20   6bc9     clrf	0xc9, 0x1           	CLRF	_hidRxLen, B
                                           ;	.line	289; usb.c	UEP1 = 0x1E;
000d22   0e1e     movlw	0x1e               	MOVLW	0x1e
000d24   6e71     movwf	0x71, 0            	MOVWF	_UEP1
                                           ;	.line	291; usb.c	ep1Bo.Cnt = sizeof(HIDRxBuffer);
000d26   0e20     movlw	0x20               	MOVLW	0x20
000d28   0104     movlb	0x4                	BANKSEL	(_ep1Bo + 1)
000d2a   6f09     movwf	0x9, 0x1           	MOVWF	(_ep1Bo + 1), B
                                           ;	.line	292; usb.c	ep1Bo.ADDR = PTR16(&HIDRxBuffer);
000d2c   0e20     movlw	0x20               	MOVLW	LOW(_HIDRxBuffer)
000d2e   6e00     movwf	0, 0               	MOVWF	r0x00
000d30   0e05     movlw	0x5                	MOVLW	HIGH(_HIDRxBuffer)
000d32   6e01     movwf	0x1, 0             	MOVWF	r0x01
000d34   5000     movf	0, 0, 0             	MOVF	r0x00, W
                                           ; removed redundant BANKSEL
000d36   6f0a     movwf	0xa, 0x1           	MOVWF	(_ep1Bo + 2), B
000d38   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
                                           ; removed redundant BANKSEL
000d3a   6f0b     movwf	0xb, 0x1           	MOVWF	(_ep1Bo + 3), B
                                           ;	.line	293; usb.c	ep1Bo.Stat = UOWN | DTSEN;
000d3c   0e88     movlw	0x88               	MOVLW	0x88
000d3e   0104     movlb	0x4                	BANKSEL	_ep1Bo
000d40   6f08     movwf	0x8, 0x1           	MOVWF	_ep1Bo, B
                                           ;	.line	295; usb.c	ep1Bi.ADDR = PTR16(&HIDTxBuffer);
000d42   0e00     movlw	0                  	MOVLW	LOW(_HIDTxBuffer)
000d44   6e00     movwf	0, 0               	MOVWF	r0x00
000d46   0e05     movlw	0x5                	MOVLW	HIGH(_HIDTxBuffer)
000d48   6e01     movwf	0x1, 0             	MOVWF	r0x01
000d4a   5000     movf	0, 0, 0             	MOVF	r0x00, W
000d4c   0104     movlb	0x4                	BANKSEL	(_ep1Bi + 2)
000d4e   6f0e     movwf	0xe, 0x1           	MOVWF	(_ep1Bi + 2), B
000d50   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
                                           ; removed redundant BANKSEL
000d52   6f0f     movwf	0xf, 0x1           	MOVWF	(_ep1Bi + 3), B
                                           ;	.line	296; usb.c	ep1Bi.Stat = DTS;
000d54   0e40     movlw	0x40               	MOVLW	0x40
000d56   0104     movlb	0x4                	BANKSEL	_ep1Bi
000d58   6f0c     movwf	0xc, 0x1           	MOVWF	_ep1Bi, B
000d5a   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000d5c   f001
000d5e   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000d60   f000
000d62   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_usb__HIDRxReport	code
                                           _HIDRxReport:
                                           ;	.line	237; usb.c	byte HIDRxReport(byte *buffer, byte len)
000732   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000734   ffe5
000736   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000738   ffd9
00073a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00073c   ffe5
00073e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000740   ffe5
000742   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000744   ffe5
000746   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000748   ffe5
00074a   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00074c   ffe5
00074e   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000750   ffe5
000752   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
000754   ffe5
000756   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
000758   ffe5
00075a   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
00075c   ffe5
00075e   0e02     movlw	0x2                	MOVLW	0x02
000760   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
000762   f000
000764   0e03     movlw	0x3                	MOVLW	0x03
000766   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
000768   f001
00076a   0e04     movlw	0x4                	MOVLW	0x04
00076c   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
00076e   f002
000770   0e05     movlw	0x5                	MOVLW	0x05
000772   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
000774   f003
000776   0100     movlb	0                  	BANKSEL	_hidRxLen
                                           ;	.line	239; usb.c	hidRxLen = 0;
000778   6bc9     clrf	0xc9, 0x1           	CLRF	_hidRxLen, B
00077a   0104     movlb	0x4                	BANKSEL	_ep1Bo
                                           ;	.line	246; usb.c	if(!(ep1Bo.Stat & UOWN))
00077c   bf08     btfsc	0x8, 0x7, 0x1      	BTFSC	_ep1Bo, 7, B
00077e   d039     bra	0x7f2                	BRA	_00132_DS_
                                           ;	.line	249; usb.c	if(len > ep1Bo.Cnt)
000780   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
                                           ; #	SUBWF	(_ep1Bo + 1), W, B
                                           ; #	BTFSC	STATUS, 0
                                           ; #	GOTO	_00127_DS_
                                           ; #	MOVFF	(_ep1Bo + 1), r0x03
                                           ; #	CLRF	_hidRxLen, B
                                           ; ;     peep 1 - test/jump to test/skip
000782   0104     movlb	0x4                	BANKSEL	(_ep1Bo + 1)
                                           ;	.line	250; usb.c	len = ep1Bo.Cnt;
000784   5d09     subwf	0x9, 0, 0x1        	SUBWF	(_ep1Bo + 1), W, B
                                           ;	.line	256; usb.c	for(hidRxLen = 0; hidRxLen < len; hidRxLen++)
000786   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
000788   c409     movff	0x409, 0x3         	MOVFF	(_ep1Bo + 1), r0x03
00078a   f003
00078c   0100     movlb	0                  	BANKSEL	_hidRxLen
00078e   6bc9     clrf	0xc9, 0x1           	CLRF	_hidRxLen, B
                                           _00133_DS_:
000790   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000792   0100     movlb	0                  	BANKSEL	_hidRxLen
000794   5dc9     subwf	0xc9, 0, 0x1       	SUBWF	_hidRxLen, W, B
000796   e221     bc	0x7da                 	BC	_00136_DS_
                                           ; removed redundant BANKSEL
                                           ;	.line	258; usb.c	buffer[hidRxLen] = HIDRxBuffer[hidRxLen];
000798   51c9     movf	0xc9, 0, 0x1        	MOVF	_hidRxLen, W, B
00079a   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
00079c   6e04     movwf	0x4, 0             	MOVWF	r0x04
00079e   6ae8     clrf	0xe8, 0             	CLRF	WREG
0007a0   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
0007a2   6e05     movwf	0x5, 0             	MOVWF	r0x05
0007a4   6ae8     clrf	0xe8, 0             	CLRF	WREG
0007a6   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
0007a8   6e06     movwf	0x6, 0             	MOVWF	r0x06
0007aa   0e20     movlw	0x20               	MOVLW	LOW(_HIDRxBuffer)
                                           ; removed redundant BANKSEL
0007ac   25c9     addwf	0xc9, 0, 0x1       	ADDWF	_hidRxLen, W, B
0007ae   6e07     movwf	0x7, 0             	MOVWF	r0x07
0007b0   6a08     clrf	0x8, 0              	CLRF	r0x08
0007b2   0e05     movlw	0x5                	MOVLW	HIGH(_HIDRxBuffer)
0007b4   2208     addwfc	0x8, 0x1, 0       	ADDWFC	r0x08, F
0007b6   c007     movff	0x7, 0xfe9         	MOVFF	r0x07, FSR0L
0007b8   ffe9
0007ba   c008     movff	0x8, 0xfea         	MOVFF	r0x08, FSR0H
0007bc   ffea
0007be   cfef     movff	0xfef, 0x7         	MOVFF	INDF0, r0x07
0007c0   f007
0007c2   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0007c4   ffe5
0007c6   c004     movff	0x4, 0xfe9         	MOVFF	r0x04, FSR0L
0007c8   ffe9
0007ca   c005     movff	0x5, 0xff3         	MOVFF	r0x05, PRODL
0007cc   fff3
0007ce   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0007d0   ec62     call	0x10c4, 0           	CALL	__gptrput1
0007d2   f008
0007d4   0100     movlb	0                  	BANKSEL	_hidRxLen
                                           ;	.line	256; usb.c	for(hidRxLen = 0; hidRxLen < len; hidRxLen++)
0007d6   2bc9     incf	0xc9, 0x1, 0x1      	INCF	_hidRxLen, F, B
0007d8   d7db     bra	0x790                	BRA	_00133_DS_
                                           _00136_DS_:
                                           ;	.line	268; usb.c	ep1Bo.Cnt = sizeof(HIDRxBuffer);
0007da   0e20     movlw	0x20               	MOVLW	0x20
0007dc   0104     movlb	0x4                	BANKSEL	(_ep1Bo + 1)
0007de   6f09     movwf	0x9, 0x1           	MOVWF	(_ep1Bo + 1), B
0007e0   0104     movlb	0x4                	BANKSEL	_ep1Bo
                                           ;	.line	269; usb.c	if(ep1Bo.Stat & DTS)
0007e2   ad08     btfss	0x8, 0x6, 0x1      	BTFSS	_ep1Bo, 6, B
0007e4   d003     bra	0x7ec                	BRA	_00129_DS_
                                           ;	.line	270; usb.c	ep1Bo.Stat = UOWN | DTSEN;
0007e6   0e88     movlw	0x88               	MOVLW	0x88
                                           ; removed redundant BANKSEL
0007e8   6f08     movwf	0x8, 0x1           	MOVWF	_ep1Bo, B
0007ea   d003     bra	0x7f2                	BRA	_00132_DS_
                                           _00129_DS_:
                                           ;	.line	272; usb.c	ep1Bo.Stat = UOWN | DTS | DTSEN;
0007ec   0ec8     movlw	0xc8               	MOVLW	0xc8
0007ee   0104     movlb	0x4                	BANKSEL	_ep1Bo
0007f0   6f08     movwf	0x8, 0x1           	MOVWF	_ep1Bo, B
                                           _00132_DS_:
0007f2   0100     movlb	0                  	BANKSEL	_hidRxLen
                                           ;	.line	275; usb.c	return hidRxLen;
0007f4   51c9     movf	0xc9, 0, 0x1        	MOVF	_hidRxLen, W, B
0007f6   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0007f8   f008
0007fa   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0007fc   f007
0007fe   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
000800   f006
000802   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
000804   f005
000806   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
000808   f004
00080a   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00080c   f003
00080e   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000810   f002
000812   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000814   f001
000816   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000818   f000
00081a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00081c   ffd9
00081e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_usb__HIDTxReport	code
                                           _HIDTxReport:
                                           ;	.line	200; usb.c	byte HIDTxReport(byte *buffer, byte len)
000906   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000908   ffe5
00090a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00090c   ffd9
00090e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000910   ffe5
000912   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000914   ffe5
000916   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000918   ffe5
00091a   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00091c   ffe5
00091e   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000920   ffe5
000922   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000924   ffe5
000926   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
000928   ffe5
00092a   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
00092c   ffe5
00092e   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
000930   ffe5
000932   0e02     movlw	0x2                	MOVLW	0x02
000934   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
000936   f000
000938   0e03     movlw	0x3                	MOVLW	0x03
00093a   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00093c   f001
00093e   0e04     movlw	0x4                	MOVLW	0x04
000940   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
000942   f002
000944   0e05     movlw	0x5                	MOVLW	0x05
000946   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
000948   f003
00094a   0104     movlb	0x4                	BANKSEL	_ep1Bi
                                           ;	.line	209; usb.c	if (ep1Bi.Stat & UOWN)
00094c   af0c     btfss	0xc, 0x7, 0x1      	BTFSS	_ep1Bi, 7, B
00094e   d002     bra	0x954                	BRA	_00106_DS_
                                           ;	.line	210; usb.c	return 0;
000950   6ae8     clrf	0xe8, 0             	CLRF	WREG
000952   d033     bra	0x9ba                	BRA	_00116_DS_
                                           _00106_DS_:
                                           ;	.line	213; usb.c	if(len > HID_INPUT_REPORT_BYTES)
000954   0e21     movlw	0x21               	MOVLW	0x21
000956   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
000958   e302     bnc	0x95e                	BNC	_00121_DS_
                                           ;	.line	214; usb.c	len = HID_INPUT_REPORT_BYTES;
00095a   0e20     movlw	0x20               	MOVLW	0x20
00095c   6e03     movwf	0x3, 0             	MOVWF	r0x03
                                           _00121_DS_:
                                           ;	.line	220; usb.c	for (i = 0; i < len; i++)
00095e   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           _00112_DS_:
000960   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000962   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
000964   e21d     bc	0x9a0                 	BC	_00115_DS_
                                           ;	.line	221; usb.c	HIDTxBuffer[i] = buffer[i];
000966   0e00     movlw	0                  	MOVLW	LOW(_HIDTxBuffer)
000968   2404     addwf	0x4, 0, 0          	ADDWF	r0x04, W
00096a   6e05     movwf	0x5, 0             	MOVWF	r0x05
00096c   6a06     clrf	0x6, 0              	CLRF	r0x06
00096e   0e05     movlw	0x5                	MOVLW	HIGH(_HIDTxBuffer)
000970   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
000972   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000974   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
000976   6e07     movwf	0x7, 0             	MOVWF	r0x07
000978   6ae8     clrf	0xe8, 0             	CLRF	WREG
00097a   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
00097c   6e08     movwf	0x8, 0             	MOVWF	r0x08
00097e   6ae8     clrf	0xe8, 0             	CLRF	WREG
000980   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
000982   c007     movff	0x7, 0xfe9         	MOVFF	r0x07, FSR0L
000984   ffe9
000986   c008     movff	0x8, 0xff3         	MOVFF	r0x08, PRODL
000988   fff3
00098a   ec26     call	0x104c, 0           	CALL	__gptrget1
00098c   f008
00098e   6e07     movwf	0x7, 0             	MOVWF	r0x07
000990   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
000992   ffe9
000994   c006     movff	0x6, 0xfea         	MOVFF	r0x06, FSR0H
000996   ffea
000998   c007     movff	0x7, 0xfef         	MOVFF	r0x07, INDF0
00099a   ffef
                                           ;	.line	220; usb.c	for (i = 0; i < len; i++)
00099c   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
00099e   d7e0     bra	0x960                	BRA	_00112_DS_
                                           _00115_DS_:
                                           ;	.line	225; usb.c	ep1Bi.Cnt = len;
0009a0   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0009a2   0104     movlb	0x4                	BANKSEL	(_ep1Bi + 1)
0009a4   6f0d     movwf	0xd, 0x1           	MOVWF	(_ep1Bi + 1), B
0009a6   0104     movlb	0x4                	BANKSEL	_ep1Bi
                                           ;	.line	226; usb.c	if(ep1Bi.Stat & DTS)
0009a8   ad0c     btfss	0xc, 0x6, 0x1      	BTFSS	_ep1Bi, 6, B
0009aa   d003     bra	0x9b2                	BRA	_00110_DS_
                                           ;	.line	227; usb.c	ep1Bi.Stat = UOWN | DTSEN;
0009ac   0e88     movlw	0x88               	MOVLW	0x88
                                           ; removed redundant BANKSEL
0009ae   6f0c     movwf	0xc, 0x1           	MOVWF	_ep1Bi, B
0009b0   d003     bra	0x9b8                	BRA	_00111_DS_
                                           _00110_DS_:
                                           ;	.line	229; usb.c	ep1Bi.Stat = UOWN | DTS | DTSEN;
0009b2   0ec8     movlw	0xc8               	MOVLW	0xc8
0009b4   0104     movlb	0x4                	BANKSEL	_ep1Bi
0009b6   6f0c     movwf	0xc, 0x1           	MOVWF	_ep1Bi, B
                                           _00111_DS_:
                                           ;	.line	231; usb.c	return len;
0009b8   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
                                           _00116_DS_:
0009ba   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0009bc   f008
0009be   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0009c0   f007
0009c2   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0009c4   f006
0009c6   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0009c8   f005
0009ca   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0009cc   f004
0009ce   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0009d0   f003
0009d2   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0009d4   f002
0009d6   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0009d8   f001
0009da   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0009dc   f000
0009de   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0009e0   ffd9
0009e2   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block for Ival
                                           	code
                                           _deviceDescriptor:
000c0c   0112     movlb	0x12               	DB	0x12, 0x01, 0x00, 0x02, 0x00, 0x00, 0x00, 0x20, 0x6b, 0x1d, 0x02, 0x00
000c0e   0200     mulwf	0, 0               
000c10   0000     nop                      
000c12   2000     addwfc	0, 0, 0           
000c14   1d6b     comf	0x6b, 0, 0x1        
000c16   0002     dw	0x2  ;unknown opcode  
000c18   0010     retfie	0                 	DB	0x10, 0x00, 0x01, 0x02, 0x00, 0x01
000c1a   0201     mulwf	0x1, 0             
000c1c   0100     movlb	0                  
                                           ; ; Starting pCode block for Ival
                                           _configDescriptor:
000c1e   0209     mulwf	0x9, 0             	DB	0x09, 0x02, 0x20, 0x00, 0x01, 0x01, 0x00, 0xa0, 0x32, 0x09, 0x04, 0x00
000c20   0020     dw	0x20  ;unknown opcode 
000c22   0101     movlb	0x1                
000c24   a000     btfss	0, 0, 0            
000c26   0932     iorlw	0x32               
000c28   0004     clrwdt                   
000c2a   0200     mulwf	0, 0               	DB	0x00, 0x02, 0x07, 0x01, 0x02, 0x00, 0x07, 0x05, 0x01, 0x02, 0x20, 0x00
000c2c   0107     movlb	0x7                
000c2e   0002     dw	0x2  ;unknown opcode  
000c30   0507     decf	0x7, 0, 0x1         
000c32   0201     mulwf	0x1, 0             
000c34   0020     dw	0x20  ;unknown opcode 
000c36   0700     decf	0, 0x1, 0x1         	DB	0x00, 0x07, 0x05, 0x82, 0x02, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
000c38   8205     bsf	0x5, 0x1, 0          
000c3a   2002     addwfc	0x2, 0, 0         
000c3c   0000     nop                      
000c3e   0000     nop                      
000c40   0000     nop                      
000c42   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00
000c44   0000     nop                      
000c46   0000     nop                      
                                           ; ; Starting pCode block for Ival
                                           _HIDReport:
000c48   a006     btfss	0x6, 0, 0          	DB	0x06, 0xa0, 0xff, 0x09, 0x01, 0xa1, 0x01, 0x09, 0x02, 0x15, 0x00, 0x26
000c4a   09ff     iorlw	0xff               
000c4c   a101     btfss	0x1, 0, 0x1        
000c4e   0901     iorlw	0x1                
000c50   1502     andwf	0x2, 0, 0x1        
000c52   2600     addwf	0, 0x1, 0          
000c54   ff00     dw	0xff00  ;unknown opcode 	DB	0x00, 0xff, 0x75, 0x08, 0x95, 0x20, 0x81, 0x02, 0x09, 0x02, 0x15, 0x00
000c56   0875     sublw	0x75               
000c58   2095     addwfc	0x95, 0, 0        
000c5a   0281     mulwf	0x81, 0            
000c5c   0209     mulwf	0x9, 0             
000c5e   0015     dw	0x15  ;unknown opcode 
000c60   0026     dw	0x26  ;unknown opcode 	DB	0x26, 0x00, 0xff, 0x75, 0x08, 0x95, 0x20, 0x91, 0x02, 0x09, 0x01, 0x15
000c62   75ff     btg	0xff, 0x2, 0x1       
000c64   9508     bcf	0x8, 0x2, 0x1        
000c66   9120     bcf	0x20, 0, 0x1         
000c68   0902     iorlw	0x2                
000c6a   1501     andwf	0x1, 0, 0x1        
000c6c   2600     addwf	0, 0x1, 0          	DB	0x00, 0x26, 0x00, 0xff, 0x75, 0x08, 0x95, 0x20, 0xb1, 0x02, 0xc0
000c6e   ff00     dw	0xff00  ;unknown opcode 
000c70   0875     sublw	0x75               
000c72   2095     addwfc	0x95, 0, 0        
000c74   02b1     mulwf	0xb1, 0            
000c76   00c0     dw	0xc0  ;unknown opcode 
                                           ; ; Starting pCode block for Ival
                                           _stringDescriptor0:
000c78   0304     mulwf	0x4, 0x1           	DB	0x04, 0x03, 0x09, 0x04
000c7a   0409     decf	0x9, 0, 0           
                                           ; ; Starting pCode block for Ival
                                           _stringDescriptor1:
000c7c   030e     mulwf	0xe, 0x1           	DB	0x0e, 0x03, 0x48, 0x00, 0x49, 0x00, 0x4a, 0x00, 0x4f, 0x00, 0x64, 0x00
000c7e   0048     dw	0x48  ;unknown opcode 
000c80   0049     dw	0x49  ;unknown opcode 
000c82   004a     dw	0x4a  ;unknown opcode 
000c84   004f     dw	0x4f  ;unknown opcode 
000c86   0064     dw	0x64  ;unknown opcode 
000c88   0065     dw	0x65  ;unknown opcode 	DB	0x65, 0x00
                                           ; ; Starting pCode block for Ival
                                           _stringDescriptor2:
000c8a   0320     mulwf	0x20, 0x1          	DB	0x20, 0x03, 0x50, 0x00, 0x55, 0x00, 0x54, 0x00, 0x41, 0x00, 0x20, 0x00
000c8c   0050     dw	0x50  ;unknown opcode 
000c8e   0055     dw	0x55  ;unknown opcode 
000c90   0054     dw	0x54  ;unknown opcode 
000c92   0041     dw	0x41  ;unknown opcode 
000c94   0020     dw	0x20  ;unknown opcode 
000c96   0050     dw	0x50  ;unknown opcode 	DB	0x50, 0x00, 0x49, 0x00, 0x43, 0x00, 0x43, 0x00, 0x48, 0x00, 0x4f, 0x00
000c98   0049     dw	0x49  ;unknown opcode 
000c9a   0043     dw	0x43  ;unknown opcode 
000c9c   0043     dw	0x43  ;unknown opcode 
000c9e   0048     dw	0x48  ;unknown opcode 
000ca0   004f     dw	0x4f  ;unknown opcode 
000ca2   0054     dw	0x54  ;unknown opcode 	DB	0x54, 0x00, 0x4f, 0x00, 0x21, 0x00, 0x21, 0x00
000ca4   004f     dw	0x4f  ;unknown opcode 
000ca6   0021     dw	0x21  ;unknown opcode 
000ca8   0021     dw	0x21  ;unknown opcode 
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 3246 (0x0cae) bytes ( 2.48%)
                                           ;           	 1623 (0x0657) words
                                           ; udata size:	  195 (0x00c3) bytes (10.88%)
                                           ; access size:	   10 (0x000a) bytes
                                           
                                           
                                           	end
